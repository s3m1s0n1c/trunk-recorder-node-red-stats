[
    {
        "id": "1e2812b14e080ea5",
        "type": "tab",
        "label": "Sonic - TR - MQTT Config",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a1e60a20e3946d2c",
        "type": "tab",
        "label": "Sonic - TR - Call Rate Overall",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ade35fbdd2d4754d",
        "type": "tab",
        "label": "Sonic - TR - Call Rate Per System",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "18508c08a9ca4084",
        "type": "tab",
        "label": "Sonic - TR - Decode Rate Per System",
        "disabled": false,
        "info": ""
    },
    {
        "id": "182d61c8f9fd79f4",
        "type": "tab",
        "label": "Sonic - TR - Recorders & Calls",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0e5e68a727329e5f",
        "type": "tab",
        "label": "Sonic - TR - Radio Units",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "10c1c9e27e1c19f1",
        "type": "tab",
        "label": "Sonic - TR - Top TalkGroups",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b67ee87b463ce07a",
        "type": "tab",
        "label": "Sonic - TR - Top Radio Units",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6748a75fc9aee743",
        "type": "tab",
        "label": "Sonic - TR - Logs",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0bacb06bab8f2a3c",
        "type": "tab",
        "label": "ScratchPad",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b0b23ee151923f28",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [],
        "out": []
    },
    {
        "id": "61de5090.0f5d9",
        "type": "mqtt-broker",
        "name": "Local MQTT Server",
        "broker": "Enter IP of MQTT Server",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8e70244d3c3238aa",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "PSNSCAN.Com Stats",
            "hideToolbar": "false",
            "allowSwipe": "mouse",
            "lockMenu": "true",
            "allowTempTheme": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 1,
                "cy": 1,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "68b82dc3eef9608d",
        "type": "ui_tab",
        "name": "Radio ID/Units",
        "icon": "fa-table",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e989c0bd77fb626f",
        "type": "ui_tab",
        "name": "Call Rate Per System",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c3effca39cc17518",
        "type": "ui_tab",
        "name": "Call Rate Overall",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cd80f7ce662d5ff1",
        "type": "ui_tab",
        "name": "Active Calls & Recorders",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2cec709f954a783e",
        "type": "ui_tab",
        "name": "Top Talkgroups",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "58877a6d047b9641",
        "type": "ui_tab",
        "name": "Decode Rate Per System",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3d32a5f038774cc5",
        "type": "ui_group",
        "name": "Decode Rate Per System",
        "tab": "58877a6d047b9641",
        "order": 2,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bd5a5f182a4afd16",
        "type": "ui_group",
        "name": "Known TG's",
        "tab": "2cec709f954a783e",
        "order": 1,
        "disp": true,
        "width": 30,
        "collapse": true,
        "className": ""
    },
    {
        "id": "a7d57a4072f80f04",
        "type": "ui_group",
        "name": "Call Rate Per System",
        "tab": "e989c0bd77fb626f",
        "order": 1,
        "disp": true,
        "width": 35,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b4ea8ccfeb9a914d",
        "type": "ui_group",
        "name": "Call Rate Overall",
        "tab": "c3effca39cc17518",
        "order": 1,
        "disp": true,
        "width": 35,
        "collapse": false,
        "className": ""
    },
    {
        "id": "9c5239938a0d6b38",
        "type": "ui_group",
        "name": "Active Calls & Recorders",
        "tab": "cd80f7ce662d5ff1",
        "order": 2,
        "disp": true,
        "width": 35,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b5e230bf4b46d85e",
        "type": "ui_group",
        "name": "Radio ID/Units",
        "tab": "68b82dc3eef9608d",
        "order": 1,
        "disp": true,
        "width": 30,
        "collapse": true,
        "className": ""
    },
    {
        "id": "82f80ef0cc5cc97b",
        "type": "ui_group",
        "name": "Unknown TG's",
        "tab": "2cec709f954a783e",
        "order": 2,
        "disp": true,
        "width": 30,
        "collapse": true,
        "className": ""
    },
    {
        "id": "8c2c535420c35271",
        "type": "ui_spacer",
        "z": "0bacb06bab8f2a3c",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 15,
        "height": 1
    },
    {
        "id": "429de8a36242fefb",
        "type": "ui_spacer",
        "z": "ade35fbdd2d4754d",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 15,
        "height": 1
    },
    {
        "id": "fa5bc4fef73dffc7",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "2bccf8bba9d0e11d",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "831549c39cfcbbd3",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 5,
        "height": 1
    },
    {
        "id": "7af1fe35516bf55e",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "da8443be59fa3b72",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 5,
        "height": 1
    },
    {
        "id": "07be26d3449260f8",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 5,
        "height": 1
    },
    {
        "id": "8c3439253db50bb6",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "c18ae89728cbdf75",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "28c8975c181423cb",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 10,
        "width": 5,
        "height": 1
    },
    {
        "id": "927f73469b4e5a9a",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 11,
        "width": 5,
        "height": 1
    },
    {
        "id": "9488b792b35467a3",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 12,
        "width": 5,
        "height": 1
    },
    {
        "id": "689e5114f38c2550",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 13,
        "width": 5,
        "height": 1
    },
    {
        "id": "709e24b92dc4756e",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 14,
        "width": 5,
        "height": 1
    },
    {
        "id": "91b71ef0e8182ad8",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 17,
        "width": 5,
        "height": 1
    },
    {
        "id": "a41417407e8c1516",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 18,
        "width": 5,
        "height": 1
    },
    {
        "id": "9a4cca5e69998153",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 19,
        "width": 5,
        "height": 1
    },
    {
        "id": "8fc9ba61fb2169a8",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 20,
        "width": 5,
        "height": 1
    },
    {
        "id": "7db5a3a24a24de15",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 21,
        "width": 5,
        "height": 1
    },
    {
        "id": "c271707155f241de",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 22,
        "width": 5,
        "height": 1
    },
    {
        "id": "7f371929c9279f5e",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 23,
        "width": 5,
        "height": 1
    },
    {
        "id": "410b5592334797b9",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 24,
        "width": 5,
        "height": 1
    },
    {
        "id": "c1e809f1f65ee7c9",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 25,
        "width": 5,
        "height": 1
    },
    {
        "id": "e5d534f9f74bc601",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 26,
        "width": 5,
        "height": 1
    },
    {
        "id": "751385048c47b379",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 27,
        "width": 5,
        "height": 1
    },
    {
        "id": "4360c4c115648377",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 28,
        "width": 5,
        "height": 1
    },
    {
        "id": "13d7a7447038c0c0",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "e72de0d5c4103ff3",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 5,
        "height": 1
    },
    {
        "id": "56bc1714a2366966",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "18468944c7c0a4d5",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 5,
        "height": 1
    },
    {
        "id": "5c4299cd03d1dc82",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 5,
        "height": 1
    },
    {
        "id": "c772a51c0d5a9f30",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "869d7beedb192b7d",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "6da267a90a4cc9de",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 10,
        "width": 5,
        "height": 1
    },
    {
        "id": "639c46d5a5a71eb5",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 11,
        "width": 5,
        "height": 1
    },
    {
        "id": "badcc97ac5b96001",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 12,
        "width": 5,
        "height": 1
    },
    {
        "id": "46868ad49b84b656",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 13,
        "width": 5,
        "height": 1
    },
    {
        "id": "e5636a6e8dae902c",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 14,
        "width": 5,
        "height": 1
    },
    {
        "id": "1c5f8157c813fa7f",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 17,
        "width": 5,
        "height": 1
    },
    {
        "id": "942cc285f5f4d88c",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 18,
        "width": 5,
        "height": 1
    },
    {
        "id": "94eacf830ed6c42c",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 19,
        "width": 5,
        "height": 1
    },
    {
        "id": "1f8bbe33dac8c115",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 20,
        "width": 5,
        "height": 1
    },
    {
        "id": "69bf4bcd1309895e",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 21,
        "width": 5,
        "height": 1
    },
    {
        "id": "6743834a828d046a",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 22,
        "width": 5,
        "height": 1
    },
    {
        "id": "f025106a392b65b3",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 23,
        "width": 5,
        "height": 1
    },
    {
        "id": "290106dc1536cf6a",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 24,
        "width": 5,
        "height": 1
    },
    {
        "id": "51ba0d8e10c51125",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 25,
        "width": 5,
        "height": 1
    },
    {
        "id": "60c6c9af569cd4f0",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 26,
        "width": 5,
        "height": 1
    },
    {
        "id": "eba17e593244862a",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 27,
        "width": 5,
        "height": 1
    },
    {
        "id": "bfe1eb7077f36043",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 28,
        "width": 5,
        "height": 1
    },
    {
        "id": "aaab987c8aea1156",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "e28b2d7a8f8aec31",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 5,
        "height": 1
    },
    {
        "id": "cc4c6e59e6f4267e",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "a5d70bfc43c6c4d9",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 5,
        "height": 1
    },
    {
        "id": "a819f4cf08d5bd25",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 5,
        "height": 1
    },
    {
        "id": "bfe28040237556d2",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "9adb3c6562e75b71",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "18f27e375428318f",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 10,
        "width": 5,
        "height": 1
    },
    {
        "id": "77f773cdcf94ac3d",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 11,
        "width": 5,
        "height": 1
    },
    {
        "id": "343f4ac6fc05fddc",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 12,
        "width": 5,
        "height": 1
    },
    {
        "id": "bcedcc180e104ec7",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 13,
        "width": 5,
        "height": 1
    },
    {
        "id": "ba4cf950f4282d46",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 14,
        "width": 5,
        "height": 1
    },
    {
        "id": "d9d31b843ee3673c",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 17,
        "width": 5,
        "height": 1
    },
    {
        "id": "d73b9a319b95465d",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 18,
        "width": 5,
        "height": 1
    },
    {
        "id": "aa7ab1cb204b0238",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 19,
        "width": 5,
        "height": 1
    },
    {
        "id": "309dbcc9112cfcfa",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 20,
        "width": 5,
        "height": 1
    },
    {
        "id": "54a91d9dac7fbddf",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 21,
        "width": 5,
        "height": 1
    },
    {
        "id": "c7eba72ea741fd60",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 22,
        "width": 5,
        "height": 1
    },
    {
        "id": "bce98e3538efb2d6",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 23,
        "width": 5,
        "height": 1
    },
    {
        "id": "92066f75880a8b8f",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 24,
        "width": 5,
        "height": 1
    },
    {
        "id": "7c766f831942d533",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 25,
        "width": 5,
        "height": 1
    },
    {
        "id": "73f7938617169664",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 26,
        "width": 5,
        "height": 1
    },
    {
        "id": "c18f50a22f9e2adf",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 27,
        "width": 5,
        "height": 1
    },
    {
        "id": "8da0f9f79c702539",
        "type": "ui_spacer",
        "z": "182d61c8f9fd79f4",
        "name": "spacer",
        "group": "",
        "order": 28,
        "width": 5,
        "height": 1
    },
    {
        "id": "1051998c801f8bf3",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "07dccfe6eac5a6e7",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 4,
        "width": 5,
        "height": 1
    },
    {
        "id": "fe25bf8ea35a6057",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "2d2b74d4e6c2bd7e",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 6,
        "width": 5,
        "height": 1
    },
    {
        "id": "76b680e480814045",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 7,
        "width": 5,
        "height": 1
    },
    {
        "id": "526e2473b524b4c9",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "dcc58d7181989b9f",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "4ee8d984e50691c0",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 13,
        "width": 5,
        "height": 1
    },
    {
        "id": "5d94af2a911b8b94",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 16,
        "width": 5,
        "height": 1
    },
    {
        "id": "0fc4ceee90fa8106",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 17,
        "width": 5,
        "height": 1
    },
    {
        "id": "dc2d0331454d79bc",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 18,
        "width": 5,
        "height": 1
    },
    {
        "id": "e6b60edaad61de39",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 19,
        "width": 5,
        "height": 1
    },
    {
        "id": "84568fe9976342b6",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 20,
        "width": 5,
        "height": 1
    },
    {
        "id": "6c4fb45dba5c7fcf",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 21,
        "width": 5,
        "height": 1
    },
    {
        "id": "ef0653afa91074eb",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 22,
        "width": 5,
        "height": 1
    },
    {
        "id": "014a1189c026e91a",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 23,
        "width": 5,
        "height": 1
    },
    {
        "id": "f1f262f4a35d3ccd",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 24,
        "width": 5,
        "height": 1
    },
    {
        "id": "283253d802cde166",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "b4ea8ccfeb9a914d",
        "order": 25,
        "width": 5,
        "height": 1
    },
    {
        "id": "3aa67b8fc5d04942",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "d00fb37fbd6433a0",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 4,
        "width": 5,
        "height": 1
    },
    {
        "id": "9946229495dabd71",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "0d94427b3fd65a73",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 6,
        "width": 5,
        "height": 1
    },
    {
        "id": "f0b36fc397d85f37",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 7,
        "width": 5,
        "height": 1
    },
    {
        "id": "18672b6cd7ff6b02",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "16f37449bd34a7b9",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "5bc7763d4c758902",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 13,
        "width": 5,
        "height": 1
    },
    {
        "id": "e6d5a88db0430d2c",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 16,
        "width": 5,
        "height": 1
    },
    {
        "id": "d66e25975201828f",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 17,
        "width": 5,
        "height": 1
    },
    {
        "id": "f2cc444ceffdd979",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 18,
        "width": 5,
        "height": 1
    },
    {
        "id": "92da6401763f685e",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 19,
        "width": 5,
        "height": 1
    },
    {
        "id": "743d0526e8fd9aa6",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 20,
        "width": 5,
        "height": 1
    },
    {
        "id": "9e21e200bab64cd8",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 21,
        "width": 5,
        "height": 1
    },
    {
        "id": "9c19fb72b50cb5b9",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 22,
        "width": 5,
        "height": 1
    },
    {
        "id": "bd9e40f4c85ba593",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "a7d57a4072f80f04",
        "order": 23,
        "width": 5,
        "height": 1
    },
    {
        "id": "6fa804c4d3cb8016",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 2,
        "width": 5,
        "height": 1
    },
    {
        "id": "c440d45ac19a7256",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "276fae030aa829da",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 5,
        "height": 1
    },
    {
        "id": "e6b9eb8132faabdb",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "52fd1ec055490f19",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 5,
        "height": 1
    },
    {
        "id": "5a427aaf5f861d79",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 5,
        "height": 1
    },
    {
        "id": "f4ceda9b18077d23",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "e4c1849406c6820a",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "1bbd14ea1970f832",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 10,
        "width": 5,
        "height": 1
    },
    {
        "id": "2b938bb5e7003f50",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 11,
        "width": 5,
        "height": 1
    },
    {
        "id": "f79dc1a5a5938926",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 13,
        "width": 5,
        "height": 1
    },
    {
        "id": "16b3bc4e120bcb16",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 14,
        "width": 5,
        "height": 1
    },
    {
        "id": "e092eed0d5fc4225",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 15,
        "width": 5,
        "height": 1
    },
    {
        "id": "54495ff3a32ef4aa",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 16,
        "width": 5,
        "height": 1
    },
    {
        "id": "5fd1d162c2acefe8",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 17,
        "width": 5,
        "height": 1
    },
    {
        "id": "72bcbafac634b8fc",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 18,
        "width": 5,
        "height": 1
    },
    {
        "id": "6e043e10ffd5e6b9",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 19,
        "width": 5,
        "height": 1
    },
    {
        "id": "f6a25e229ff0f370",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 20,
        "width": 5,
        "height": 1
    },
    {
        "id": "fb3eee6cd47fca59",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 21,
        "width": 5,
        "height": 1
    },
    {
        "id": "46ba8fa1647e220e",
        "type": "ui_spacer",
        "z": "a1e60a20e3946d2c",
        "name": "spacer",
        "group": "",
        "order": 22,
        "width": 5,
        "height": 1
    },
    {
        "id": "d76d78c0a7caadf3",
        "type": "ui_group",
        "name": "Top Radio Units",
        "tab": "85f70194eeef25f9",
        "order": 1,
        "disp": true,
        "width": 30,
        "collapse": true,
        "className": ""
    },
    {
        "id": "85f70194eeef25f9",
        "type": "ui_tab",
        "name": "Top Radio Units",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9c72f23b4df7a696",
        "type": "ui_group",
        "name": "Trunk-Recorder Decode Rate",
        "tab": "2d27cdc532355847",
        "order": 2,
        "disp": true,
        "width": 23,
        "collapse": false,
        "className": ""
    },
    {
        "id": "2d27cdc532355847",
        "type": "ui_tab",
        "name": "Decode Rate",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ae9cc32d6230e0b9",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 2,
        "width": 5,
        "height": 1
    },
    {
        "id": "14309c47fbbd5148",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "1291ab66d1223069",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 4,
        "width": 5,
        "height": 1
    },
    {
        "id": "549cb5e507a721c4",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "58154ca61cd83d5c",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 6,
        "width": 5,
        "height": 1
    },
    {
        "id": "4a1539f8d654996b",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 7,
        "width": 5,
        "height": 1
    },
    {
        "id": "87ee9d238e397ada",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "ef086277bbbbda77",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "411edf5c09c12687",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 10,
        "width": 5,
        "height": 1
    },
    {
        "id": "12f4d0aaaad326ac",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 11,
        "width": 5,
        "height": 1
    },
    {
        "id": "7b335e915412ca79",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 13,
        "width": 5,
        "height": 1
    },
    {
        "id": "0691d2721a3971d7",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 14,
        "width": 5,
        "height": 1
    },
    {
        "id": "ed71f406490beda8",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 15,
        "width": 5,
        "height": 1
    },
    {
        "id": "630d362354c1be72",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 16,
        "width": 5,
        "height": 1
    },
    {
        "id": "184f72711002957a",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 17,
        "width": 5,
        "height": 1
    },
    {
        "id": "b0544f3b0f70a210",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 18,
        "width": 5,
        "height": 1
    },
    {
        "id": "7c2c559676a1cd45",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 19,
        "width": 5,
        "height": 1
    },
    {
        "id": "466009a6e5c7f2b0",
        "type": "ui_spacer",
        "z": "18508c08a9ca4084",
        "name": "spacer",
        "group": "9c5239938a0d6b38",
        "order": 20,
        "width": 5,
        "height": 1
    },
    {
        "id": "d53af9f2dddbe6e1",
        "type": "ui_group",
        "name": "Logs",
        "tab": "58d0f4bf31be7cbb",
        "order": 1,
        "disp": true,
        "width": 35,
        "collapse": false,
        "className": ""
    },
    {
        "id": "792f988ae2946017",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 2,
        "width": 5,
        "height": 1
    },
    {
        "id": "72d2ffbf7a2e1ae0",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "5cdc3cce626be9e1",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 4,
        "width": 5,
        "height": 1
    },
    {
        "id": "bd6d7e5ef3770da6",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "2badd96f2d50dc47",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 6,
        "width": 5,
        "height": 1
    },
    {
        "id": "29bd57f3184cd422",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 7,
        "width": 5,
        "height": 1
    },
    {
        "id": "47b61ae95afdf0d6",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "20f14f8ab0d191c2",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "14cb4c531543c5e6",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 10,
        "width": 5,
        "height": 1
    },
    {
        "id": "6bcff93a30e746f1",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 11,
        "width": 5,
        "height": 1
    },
    {
        "id": "02b1793b60222a91",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 13,
        "width": 5,
        "height": 1
    },
    {
        "id": "55425a9574ec6e34",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 14,
        "width": 5,
        "height": 1
    },
    {
        "id": "8897187cc5c39125",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 15,
        "width": 5,
        "height": 1
    },
    {
        "id": "8c912759a942f98c",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 16,
        "width": 5,
        "height": 1
    },
    {
        "id": "75f40a1261b6b5b0",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 17,
        "width": 5,
        "height": 1
    },
    {
        "id": "f4bdab24cdfbc331",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 18,
        "width": 5,
        "height": 1
    },
    {
        "id": "e3e523c3d71ea270",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 19,
        "width": 5,
        "height": 1
    },
    {
        "id": "8a1d4326f3e23ef4",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 20,
        "width": 5,
        "height": 1
    },
    {
        "id": "dd203e56b6431d2e",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 21,
        "width": 5,
        "height": 1
    },
    {
        "id": "fdbee8d70b744001",
        "type": "ui_spacer",
        "z": "6748a75fc9aee743",
        "name": "spacer",
        "group": "d53af9f2dddbe6e1",
        "order": 22,
        "width": 5,
        "height": 1
    },
    {
        "id": "58d0f4bf31be7cbb",
        "type": "ui_tab",
        "name": "Logs",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "83d310b1c3ed94c1",
        "type": "ui_spacer",
        "z": "b67ee87b463ce07a",
        "name": "spacer",
        "group": "d76d78c0a7caadf3",
        "order": 2,
        "width": 25,
        "height": 1
    },
    {
        "id": "f021d72d899e0f59",
        "type": "mqtt in",
        "z": "1e2812b14e080ea5",
        "name": "",
        "topic": "Enter MQTT Topic/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "61de5090.0f5d9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "4e769efc5710512f",
                "45e472c7c91780dc"
            ]
        ]
    },
    {
        "id": "4e769efc5710512f",
        "type": "debug",
        "z": "1e2812b14e080ea5",
        "name": "MQTT Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 400,
        "y": 180,
        "wires": []
    },
    {
        "id": "45e472c7c91780dc",
        "type": "switch",
        "z": "1e2812b14e080ea5",
        "name": "Topic Filtering",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "nswpsn/systems",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nswpsn/recorder",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nswpsn/calls_active",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "nswpsn/units",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nswpsn/recorders",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nswpsn/rates",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nswpsn/call_end",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nswpsn/call_start",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "nswpsn/trunk_recorder/console",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "nswpsn/messages",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 10,
        "x": 380,
        "y": 460,
        "wires": [
            [
                "1e535b703f4acccd",
                "e309e4e8dded5202"
            ],
            [
                "19726541e5e73b8c",
                "dbc80b636c1b04ca"
            ],
            [
                "eb9e05b336c3bffe",
                "b4874e8bfc9e4d0f"
            ],
            [
                "39201d7083d987b2",
                "b47a0c52a08c604b"
            ],
            [
                "7c7d4f588a458af9",
                "f188a930b2571e2c"
            ],
            [
                "bd57289401918979",
                "61025a13de557680"
            ],
            [
                "ac6c6fd95de352be",
                "b9f3064564340f03"
            ],
            [
                "30a34da8eca34b50",
                "eed418cce0e3f531"
            ],
            [
                "a542b021bbd10481",
                "70e0c09b2ad44518"
            ],
            [
                "6377e7e3d1094879",
                "8427f0f0af531ba1"
            ]
        ]
    },
    {
        "id": "bd57289401918979",
        "type": "debug",
        "z": "1e2812b14e080ea5",
        "name": "Rates Filter Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 870,
        "y": 580,
        "wires": []
    },
    {
        "id": "61025a13de557680",
        "type": "link out",
        "z": "1e2812b14e080ea5",
        "name": "Send Rates",
        "mode": "link",
        "links": [
            "a64eaf7d67b95e7d"
        ],
        "x": 795,
        "y": 620,
        "wires": [],
        "info": "Send Rates Topic to Rates Flow"
    },
    {
        "id": "b4874e8bfc9e4d0f",
        "type": "link out",
        "z": "1e2812b14e080ea5",
        "name": "Send Calls_Active",
        "mode": "link",
        "links": [
            "650d3e1a0ee32c3c",
            "74999e3083f4b402",
            "d42e71f13b3341ad",
            "245d08ddaab1aa8b",
            "73c3ff26a1897cd0",
            "093bd9d25f0f65c5",
            "c127d3c675e888fa"
        ],
        "x": 795,
        "y": 380,
        "wires": []
    },
    {
        "id": "eb9e05b336c3bffe",
        "type": "debug",
        "z": "1e2812b14e080ea5",
        "name": "Calls_Active Filter Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 890,
        "y": 340,
        "wires": []
    },
    {
        "id": "19726541e5e73b8c",
        "type": "debug",
        "z": "1e2812b14e080ea5",
        "name": "Recorder Filter Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 880,
        "y": 260,
        "wires": []
    },
    {
        "id": "7c7d4f588a458af9",
        "type": "debug",
        "z": "1e2812b14e080ea5",
        "name": "Recorders Filter Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 890,
        "y": 500,
        "wires": []
    },
    {
        "id": "30a34da8eca34b50",
        "type": "debug",
        "z": "1e2812b14e080ea5",
        "name": "Calls_Start Filter Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 890,
        "y": 740,
        "wires": []
    },
    {
        "id": "ac6c6fd95de352be",
        "type": "debug",
        "z": "1e2812b14e080ea5",
        "name": "Calls_End Filter Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 880,
        "y": 660,
        "wires": []
    },
    {
        "id": "dbc80b636c1b04ca",
        "type": "link out",
        "z": "1e2812b14e080ea5",
        "name": "Send Recorder",
        "mode": "link",
        "links": [
            "4f0d0cc44435a1a7"
        ],
        "x": 795,
        "y": 300,
        "wires": []
    },
    {
        "id": "f188a930b2571e2c",
        "type": "link out",
        "z": "1e2812b14e080ea5",
        "name": "Send Recorders",
        "mode": "link",
        "links": [
            "c8c40b3480527042"
        ],
        "x": 795,
        "y": 540,
        "wires": []
    },
    {
        "id": "eed418cce0e3f531",
        "type": "link out",
        "z": "1e2812b14e080ea5",
        "name": "Send Call_Start",
        "mode": "link",
        "links": [
            "957f0a81ab4f86ea",
            "b6ef4a8314ba0ff1",
            "ceedd51a44c74f22"
        ],
        "x": 795,
        "y": 780,
        "wires": []
    },
    {
        "id": "b9f3064564340f03",
        "type": "link out",
        "z": "1e2812b14e080ea5",
        "name": "Send Call_End",
        "mode": "link",
        "links": [
            "f2929325a5d0ce82",
            "349c159b6a355639",
            "5c4bb131bc495452"
        ],
        "x": 795,
        "y": 700,
        "wires": []
    },
    {
        "id": "b47a0c52a08c604b",
        "type": "link out",
        "z": "1e2812b14e080ea5",
        "name": "Send Radio Units",
        "mode": "link",
        "links": [
            "884301d3c1f635bd",
            "ca9ce83303b3bac4",
            "31e3acc42add71f9",
            "36af6e84c6970d15"
        ],
        "x": 795,
        "y": 460,
        "wires": []
    },
    {
        "id": "e309e4e8dded5202",
        "type": "debug",
        "z": "1e2812b14e080ea5",
        "name": "Systems Filter Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "1e535b703f4acccd",
        "type": "link out",
        "z": "1e2812b14e080ea5",
        "name": "Send Systems",
        "mode": "link",
        "links": [
            "4f0d0cc44435a1a7",
            "0a83489337e8f369"
        ],
        "x": 795,
        "y": 220,
        "wires": []
    },
    {
        "id": "39201d7083d987b2",
        "type": "debug",
        "z": "1e2812b14e080ea5",
        "name": "Radio Units Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 870,
        "y": 420,
        "wires": []
    },
    {
        "id": "a542b021bbd10481",
        "type": "debug",
        "z": "1e2812b14e080ea5",
        "name": "Console Log Filter Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 890,
        "y": 820,
        "wires": []
    },
    {
        "id": "70e0c09b2ad44518",
        "type": "link out",
        "z": "1e2812b14e080ea5",
        "name": "Send Console Logs",
        "mode": "link",
        "links": [
            "c1907c1b694e4623"
        ],
        "x": 795,
        "y": 860,
        "wires": []
    },
    {
        "id": "6377e7e3d1094879",
        "type": "debug",
        "z": "1e2812b14e080ea5",
        "name": "Messages Log Filter Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 900,
        "y": 900,
        "wires": []
    },
    {
        "id": "8427f0f0af531ba1",
        "type": "link out",
        "z": "1e2812b14e080ea5",
        "name": "Send Messages Log",
        "mode": "link",
        "links": [
            "af7f2d9d9ba78997"
        ],
        "x": 795,
        "y": 940,
        "wires": []
    },
    {
        "id": "1a6329993009f418",
        "type": "link in",
        "z": "a1e60a20e3946d2c",
        "name": "Sys. Calls",
        "links": [
            "828552c84a2c4c68"
        ],
        "x": 340,
        "y": 260,
        "wires": [
            [
                "8017c3e210e52d0f"
            ]
        ],
        "l": true
    },
    {
        "id": "8017c3e210e52d0f",
        "type": "function",
        "z": "a1e60a20e3946d2c",
        "name": "Max",
        "func": "function roundToTwo(num) {\n    return +(Math.round(num + \"e+2\") + \"e-2\");\n}\n\nvar data = context.get(\"data\");\nif (data === undefined) {\n    data = {};\n    context.set(\"data\", data);\n}\n\nvar dots = context.get(\"dots\");\ndots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots)\n\nvar intervals = [\"2s\", \"15s\", \"1min\"];\n\nif (msg.topic != \"sendit\") {\n    for (let period in intervals) {\n        var rate = intervals[period]\n\n        if (data[rate] === undefined) {\n            data[rate] = {};\n        }\n\n        var number = roundToTwo(msg.payload);\n\n        if (data[rate][msg.topic] === undefined) {\n            data[rate][msg.topic] = {\n                // \"count\": 0,\n                // \"total\": 0,\n                // \"avg\": 0,\n                // \"min\": number,\n                \"max\": number,\n            };\n        }\n\n        //data[rate][msg.topic].total = roundToTwo(data[rate][msg.topic].total + number);\n        //data[rate][msg.topic].count += 1;\n\n        //data[rate][msg.topic].avg = roundToTwo(data[rate][msg.topic].total / data[rate][msg.topic].count);\n        if (number > data[rate][msg.topic].max) { data[rate][msg.topic].max = number; }\n        //if (number < data[rate][msg.topic].min) { data[rate][msg.topic].min = number; }\n    }\n    node.status({ fill: \"green\", shape: dots, text: \"calculating...\" });\n} else {\n    var msg_out = [];\n\n    //var outputs = [\"max\"];\n\n    for (let interval in intervals) {\n        var period = intervals[interval];\n        if (msg.payload == period) {\n            for (let system in data[period]) {\n                var newmsg = {};\n                var index = \"max\";\n                newmsg.topic = system;\n                newmsg.target = period;\n                newmsg.payload = data[period][system][index];\n                //msg_out.push(newmsg);\n                node.send(newmsg);\n            }\n            node.status({ fill: \"yellow\", shape: dots, text: \"sent \" + period });\n            data[period] = {};\n        }\n    }\n    //node.send(msg_out);\n    //data = {}\n\n}\n\n\ncontext.set(\"data\", data);\nreturn; //msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"yellow\", shape: \"dot\", text: \"waiting\" });",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 260,
        "wires": [
            [
                "3df1b3f6ec614101"
            ]
        ]
    },
    {
        "id": "621f685f9ef010de",
        "type": "inject",
        "z": "a1e60a20e3946d2c",
        "name": "1min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/1 0-23 * * *",
        "once": false,
        "onceDelay": "60",
        "topic": "sendit",
        "payload": "1min",
        "payloadType": "str",
        "x": 350,
        "y": 380,
        "wires": [
            [
                "8017c3e210e52d0f"
            ]
        ]
    },
    {
        "id": "733998d5b52e02c3",
        "type": "inject",
        "z": "a1e60a20e3946d2c",
        "name": "15sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "sendit",
        "payload": "15s",
        "payloadType": "str",
        "x": 350,
        "y": 340,
        "wires": [
            [
                "8017c3e210e52d0f"
            ]
        ]
    },
    {
        "id": "888374b44d3341db",
        "type": "inject",
        "z": "a1e60a20e3946d2c",
        "name": "2sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "sendit",
        "payload": "2s",
        "payloadType": "str",
        "x": 350,
        "y": 300,
        "wires": [
            [
                "8017c3e210e52d0f"
            ]
        ]
    },
    {
        "id": "3df1b3f6ec614101",
        "type": "switch",
        "z": "a1e60a20e3946d2c",
        "name": "",
        "property": "target",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "2s",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "15s",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1min",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 550,
        "y": 340,
        "wires": [
            [
                "39201332080f7382"
            ],
            [
                "a4924e1e2944baa2"
            ],
            [
                "1d1a205eb7359a03"
            ]
        ]
    },
    {
        "id": "3f8ca3a37b196979",
        "type": "link in",
        "z": "a1e60a20e3946d2c",
        "name": "Total Calls",
        "links": [
            "828552c84a2c4c68"
        ],
        "x": 340,
        "y": 520,
        "wires": [
            [
                "73a8b75015e6c93b",
                "b1f3994a1eecd4c4"
            ]
        ],
        "l": true
    },
    {
        "id": "11d6989322bd0d75",
        "type": "inject",
        "z": "a1e60a20e3946d2c",
        "name": "5min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/5 0-23 * * *",
        "once": false,
        "onceDelay": "60",
        "topic": "sendit",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 600,
        "wires": [
            [
                "73a8b75015e6c93b"
            ]
        ]
    },
    {
        "id": "73a8b75015e6c93b",
        "type": "function",
        "z": "a1e60a20e3946d2c",
        "name": "Avg/Min/Max",
        "func": "function roundToTwo(num) {\n    return +(Math.round(num + \"e+2\") + \"e-2\");\n}\n\n\nvar data = context.get(\"data\");\nif (data === undefined) {\n    data = {};\n    context.set(\"data\", data);\n}\n\nvar dots = context.get(\"dots\");\ndots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots)\n\n\nif (msg.topic != \"sendit\") {\n    var number = roundToTwo(msg.payload);\n\n    if (data[msg.topic] === undefined) {\n        data[msg.topic] = {\n            \"count\": 0,\n            \"total\": 0,\n            \"avg\": 0,\n            \"min\": number,\n            \"max\": number,\n        };\n    }\n\n    data[msg.topic].total = roundToTwo(data[msg.topic].total + number);\n    data[msg.topic].count += 1;\n\n    data[msg.topic].avg = roundToTwo(data[msg.topic].total / data[msg.topic].count);\n    if (number > data[msg.topic].max) { data[msg.topic].max = number; }\n    if (number < data[msg.topic].min) { data[msg.topic].min = number; }\n\n    node.status({ fill: \"green\", shape: dots, text: data[msg.topic].count + \" - calls: \" + number });\n} else {\n    var msg_out = [];\n\n    var outputs = [\"avg\", \"min\", \"max\"];\n\n    for (let system in data) {\n        for (var key in outputs) {\n\n            var newmsg = {};\n            var index = outputs[key];\n            newmsg.topic = index;\n            newmsg.payload = data[system][outputs[key]];\n            msg_out.push(newmsg);\n            //node.send(newmsg);\n\n        }\n    }\n    node.send(msg_out);\n    data = {}\n    node.status({ fill: \"yellow\", shape: dots, text: \"sent\" });\n}\n\n\ncontext.set(\"data\", data);\nreturn; //msg;",
        "outputs": 3,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"yellow\", shape: \"dot\", text: \"waiting\" });",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 600,
        "wires": [
            [
                "b24dbedcf30ba20a"
            ],
            [
                "ee880d1b1fe26e87"
            ],
            [
                "5084ceab417e36eb"
            ]
        ]
    },
    {
        "id": "828552c84a2c4c68",
        "type": "link out",
        "z": "a1e60a20e3946d2c",
        "name": "Total Calls",
        "mode": "link",
        "links": [
            "3d60ee395ccb54ec",
            "3f8ca3a37b196979",
            "1a6329993009f418"
        ],
        "x": 610,
        "y": 80,
        "wires": [],
        "inputLabels": [
            "All"
        ],
        "l": true
    },
    {
        "id": "0c2de4b3a5a5b470",
        "type": "link out",
        "z": "a1e60a20e3946d2c",
        "name": "System Calls",
        "mode": "link",
        "links": [],
        "x": 610,
        "y": 120,
        "wires": [],
        "l": true
    },
    {
        "id": "bc1115128c0bdc37",
        "type": "function",
        "z": "a1e60a20e3946d2c",
        "name": "Count Calls",
        "func": "// Record system number/shortname mapping\nvar systems = global.get(\"systems\");\nif (systems === undefined) {\n    systems = {};\n    global.set(\"systems\", systems);\n}\n\n// Count calls by shortname\nvar call3 = {};\nfor (var i = 0; i < msg.payload.calls.length; i++) {\n    var name = msg.payload.calls[i].shortName\n    var sys = msg.payload.calls[i].sysNum\n\n    if (!call3[name]) {\n        call3[name] = 0;\n    }\n    call3[name] = call3[name] + 1;\n\n    systems[sys] = name;\n}\n\n// Generate payload by shortname\nvar msgBySys = []\nvar callStatus = \"\"\n\nfor (let k in call3) {\n    var system = k\n    var callcount = Number(call3[k])\n    var status = system + \":\" + callcount\n    callStatus = (callStatus == \"\") ? status : callStatus + \", \" + status;\n    msgBySys.push({ payload: callcount, topic: system });\n}\n\n// Generate payload for all calls\nvar len = Object.keys(msg.payload.calls).length;\nvar msgAll = {}\nmsgAll.payload = len\nmsgAll.topic = \"all\"\n\nvar dots = context.get(\"dots\");\ndots = (dots==undefined)||(dots==\"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots)\n\nnode.status({ fill: \"green\", shape: dots, text: callStatus });\nnode.send([msgAll, msgBySys]);\nreturn [, msgAll];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({fill:\"yellow\",shape:\"dot\",text:\"waiting\"});",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 120,
        "wires": [
            [
                "828552c84a2c4c68"
            ],
            [
                "0c2de4b3a5a5b470"
            ]
        ]
    },
    {
        "id": "e918a68fc17327b0",
        "type": "link out",
        "z": "a1e60a20e3946d2c",
        "name": "AllCalls",
        "mode": "link",
        "links": [
            "de58cc9ff7d1df42"
        ],
        "x": 360,
        "y": 80,
        "wires": [],
        "l": true
    },
    {
        "id": "73c3ff26a1897cd0",
        "type": "link in",
        "z": "a1e60a20e3946d2c",
        "name": "Receive Calls_Active",
        "links": [
            "b4874e8bfc9e4d0f"
        ],
        "x": 175,
        "y": 80,
        "wires": [
            [
                "e918a68fc17327b0",
                "bc1115128c0bdc37"
            ]
        ]
    },
    {
        "id": "5084ceab417e36eb",
        "type": "ui_text",
        "z": "a1e60a20e3946d2c",
        "group": "b4ea8ccfeb9a914d",
        "order": 11,
        "width": 4,
        "height": 1,
        "name": "Max",
        "label": "Max:",
        "format": "{{msg.payload | number:0}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 790,
        "y": 640,
        "wires": []
    },
    {
        "id": "ee880d1b1fe26e87",
        "type": "ui_text",
        "z": "a1e60a20e3946d2c",
        "group": "b4ea8ccfeb9a914d",
        "order": 10,
        "width": 3,
        "height": 1,
        "name": "Min",
        "label": "Min:",
        "format": "{{msg.payload | number:0}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 790,
        "y": 600,
        "wires": []
    },
    {
        "id": "b24dbedcf30ba20a",
        "type": "ui_text",
        "z": "a1e60a20e3946d2c",
        "group": "b4ea8ccfeb9a914d",
        "order": 12,
        "width": 4,
        "height": 1,
        "name": "Avg",
        "label": "5m Avg:  ",
        "format": "{{msg.payload | number:1}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 790,
        "y": 560,
        "wires": []
    },
    {
        "id": "b1f3994a1eecd4c4",
        "type": "ui_gauge",
        "z": "a1e60a20e3946d2c",
        "name": "",
        "group": "b4ea8ccfeb9a914d",
        "order": 1,
        "width": 11,
        "height": 7,
        "gtype": "gage",
        "title": "Current Call Rate",
        "label": "Calls/Min",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 750,
        "y": 520,
        "wires": []
    },
    {
        "id": "39201332080f7382",
        "type": "ui_chart",
        "z": "a1e60a20e3946d2c",
        "name": "Calls Per Minute",
        "group": "b4ea8ccfeb9a914d",
        "order": 2,
        "width": 19,
        "height": 8,
        "label": "Calls Per Minute",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "Calls",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 760,
        "y": 260,
        "wires": [
            []
        ],
        "inputLabels": [
            "Calls"
        ]
    },
    {
        "id": "a4924e1e2944baa2",
        "type": "ui_chart",
        "z": "a1e60a20e3946d2c",
        "name": "Calls Per Hour",
        "group": "b4ea8ccfeb9a914d",
        "order": 14,
        "width": 15,
        "height": 10,
        "label": "Calls Per Hour",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "Calls",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 760,
        "y": 300,
        "wires": [
            []
        ],
        "inputLabels": [
            "Calls"
        ]
    },
    {
        "id": "1d1a205eb7359a03",
        "type": "ui_chart",
        "z": "a1e60a20e3946d2c",
        "name": "Calls Per Day",
        "group": "b4ea8ccfeb9a914d",
        "order": 15,
        "width": 15,
        "height": 10,
        "label": "Calls Per Day",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "Calls",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 760,
        "y": 340,
        "wires": [
            []
        ],
        "inputLabels": [
            "Calls"
        ]
    },
    {
        "id": "245d08ddaab1aa8b",
        "type": "link in",
        "z": "ade35fbdd2d4754d",
        "name": "Receive Calls_Active",
        "links": [
            "b4874e8bfc9e4d0f"
        ],
        "x": 215,
        "y": 120,
        "wires": [
            [
                "ef3788c737c5f2da",
                "0a412610c83e77a8"
            ]
        ]
    },
    {
        "id": "0a83489337e8f369",
        "type": "link in",
        "z": "ade35fbdd2d4754d",
        "name": "Receive Systems",
        "links": [
            "1e535b703f4acccd"
        ],
        "x": 215,
        "y": 180,
        "wires": [
            [
                "0a412610c83e77a8"
            ]
        ]
    },
    {
        "id": "eac33361a3bb910b",
        "type": "link in",
        "z": "ade35fbdd2d4754d",
        "name": "Sys. Calls",
        "links": [
            "785d2003ca17893a"
        ],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "94d844ef846f270a"
            ]
        ],
        "l": true
    },
    {
        "id": "dde907c3411a52a8",
        "type": "link in",
        "z": "ade35fbdd2d4754d",
        "name": "Total Calls",
        "links": [
            "4bfe4a6697fee1a3"
        ],
        "x": 380,
        "y": 580,
        "wires": [
            [
                "b4854fb213c4f27f",
                "d66876375a267844"
            ]
        ],
        "l": true
    },
    {
        "id": "94d844ef846f270a",
        "type": "function",
        "z": "ade35fbdd2d4754d",
        "name": "Max",
        "func": "function roundToTwo(num) {\n    return +(Math.round(num + \"e+2\") + \"e-2\");\n}\n\nvar data = context.get(\"data\", \"memoryOnly\");\nif (data === undefined) {\n    data = {};\n    context.set(\"data\", data, \"memoryOnly\");\n}\n\nvar next2sAvg = context.get(\"next2sAvg\", \"memoryOnly\");\nif (next2sAvg === undefined) {\n    next2sAvg = Number(msg.timestamp) + 2\n    context.set(\"next2sAvg\", next2sAvg, \"memoryOnly\");\n}\n\nvar next15sAvg = context.get(\"next15sAvg\", \"memoryOnly\");\nif (next15sAvg === undefined) {\n    next15sAvg = Number(msg.timestamp) + 15\n    context.set(\"next15sAvg\", next15sAvg, \"memoryOnly\");\n}\n\nvar next1mAvg = context.get(\"next1mAvg\", \"memoryOnly\");\nif (next1mAvg === undefined) {\n    next1mAvg = Number(msg.timestamp) + 300\n    context.set(\"next1mAvg\", next1mAvg, \"memoryOnly\");\n}\n\nvar dots = context.get(\"dots\", \"memoryOnly\");\ndots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots, \"memoryOnly\")\n\nvar intervals = [\"2s\", \"15s\", \"1min\"];\n\n//if (msg.topic != \"sendit\") {\n    for (let period in intervals) {\n        var rate = intervals[period]\n\n        if (data[rate] === undefined) {\n            data[rate] = {};\n        }\n\n        var number = roundToTwo(msg.payload);\n\n        if (data[rate][msg.topic] === undefined) {\n            data[rate][msg.topic] = {\n                \"max\": number,\n            };\n        }\n\n        if (number > data[rate][msg.topic].max) { data[rate][msg.topic].max = number; }\n    }\n    node.status({ fill: \"green\", shape: dots, text: \"calculating...\" });\n//} else {\n\n    //var msg_out = [];\n\n    //for (let interval in intervals) {\n    //    var period = intervals[interval];\n        // if (msg.payload == period) {\n        //     for (let system in data[period]) {\n        //         var newmsg = {};\n        //         var index = \"max\";\n        //         newmsg.topic = system;\n        //         newmsg.target = period;\n        //         newmsg.payload = data[period][system][index];\n        //         node.send(newmsg);\n        //     }\n        //     node.status({ fill: \"yellow\", shape: dots, text: \"sent \" + period });\n        //     data[period] = {};\n        //}\n    //}\n//}\n\nvar newmsg = {};\n\nif (msg.timestamp >= next2sAvg){\n    var period = \"2s\";\n    for (let system in data[period]) {\n        newmsg = {\n            topic: system,\n            target: period,\n            payload: data[period][system][\"max\"]\n        };\n        node.send(newmsg);\n    }\n    node.status({ fill: \"yellow\", shape: dots, text: \"sent \" + period });\n    data[period] = {};\n\n    next2sAvg = Number(msg.timestamp) + 2\n    context.set(\"next2sAvg\", next2sAvg, \"memoryOnly\");\n}\n\nif (msg.timestamp >= next15sAvg) {\n    var period = \"15s\";\n    for (let system in data[period]) {\n        newmsg = {\n            topic: system,\n            target: period,\n            payload: data[period][system][\"max\"]\n        };\n        node.send(newmsg);\n    }\n    node.status({ fill: \"yellow\", shape: dots, text: \"sent \" + period });\n    data[period] = {};\n\n    next15sAvg = Number(msg.timestamp) + 15\n    context.set(\"next15sAvg\", next15sAvg, \"memoryOnly\");\n}\n\nif (msg.timestamp >= next1mAvg) {\n    var period = \"1min\";\n    for (let system in data[period]) {\n        newmsg = {\n            topic: system,\n            target: period,\n            payload: data[period][system][\"max\"]\n        };\n        node.send(newmsg);\n    }\n    node.status({ fill: \"yellow\", shape: dots, text: \"sent \" + period });\n    data[period] = {};\n\n    next1mAvg = Number(msg.timestamp) + 60\n    context.set(\"next1mAvg\", next1mAvg, \"memoryOnly\");\n}\n\ncontext.set(\"data\", data, \"memoryOnly\");\nreturn; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"yellow\", shape: \"dot\", text: \"waiting\" });",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 340,
        "wires": [
            [
                "6c2a4e1e61c1cd7d"
            ]
        ]
    },
    {
        "id": "6c2a4e1e61c1cd7d",
        "type": "switch",
        "z": "ade35fbdd2d4754d",
        "name": "",
        "property": "target",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "2s",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "15s",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1min",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 550,
        "y": 420,
        "wires": [
            [
                "bf6f18bfdb3cce95"
            ],
            [
                "63754a53c812c6ba"
            ],
            [
                "12903897a619c6d9"
            ]
        ]
    },
    {
        "id": "d66876375a267844",
        "type": "function",
        "z": "ade35fbdd2d4754d",
        "name": "Avg/Min/Max",
        "func": "function roundToTwo(num) {\n    return +(Math.round(num + \"e+2\") + \"e-2\");\n}\n\nvar callData = context.get(\"callData\", \"memoryOnly\");\nif (callData === undefined) {\n    callData = {};\n    context.set(\"callData\", callData, \"memoryOnly\");\n}\n\nvar dots = context.get(\"dots\", \"memoryOnly\");\ndots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots, \"memoryOnly\")\n\nvar next5mAvg = context.get(\"next5mAvg\", \"memoryOnly\");\nif (next5mAvg === undefined) {\n    next5mAvg = Number(msg.timestamp) + 300\n    context.set(\"next5mAvg\", next5mAvg, \"memoryOnly\");\n}\n\nvar number = roundToTwo(msg.payload);\n\nif (callData[msg.topic] === undefined) {\n    callData[msg.topic] = {\n        \"count\": 0,\n        \"total\": 0,\n        \"avg\": 0,\n        \"min\": number,\n        \"max\": number,\n    };\n}\n\ncallData[msg.topic].total = roundToTwo(callData[msg.topic].total + number);\ncallData[msg.topic].count += 1;\n\ncallData[msg.topic].avg = roundToTwo(callData[msg.topic].total / callData[msg.topic].count);\nif (number > callData[msg.topic].max) { callData[msg.topic].max = number; }\nif (number < callData[msg.topic].min) { callData[msg.topic].min = number; }\n\nvar nodeStatus = callData[msg.topic].count + \" - calls: \" + number;\nnode.status({ fill: \"green\", shape: dots, text: nodeStatus });\n\nif (Number(msg.timestamp) >= Number(next5mAvg)) {\n\n    var msg_out = {}\n    msg_out.payload = {}\n\n    var outputs = [\"avg\", \"min\", \"max\"];\n\n    for (let system in callData) {\n        for (var key in outputs) {\n            msg_out.payload[outputs[key]] = callData[system][outputs[key]];\n        }\n    }\n\n    node.send(msg_out);\n\n    next5mAvg = Number(msg.timestamp) + 300\n    context.set(\"next5mAvg\", next5mAvg, \"memoryOnly\");\n\n    callData = {}\n    node.status({ fill: \"yellow\", shape: dots, text: \"sent \" + nodeStatus });\n}\n\ncontext.set(\"callData\", callData, \"memoryOnly\");\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"yellow\", shape: \"dot\", text: \"waiting\" });",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 620,
        "wires": [
            [
                "af25bf7141b55733",
                "476232d8a89cd269",
                "686195a120fef396"
            ]
        ]
    },
    {
        "id": "4bfe4a6697fee1a3",
        "type": "link out",
        "z": "ade35fbdd2d4754d",
        "name": "Total Calls",
        "mode": "link",
        "links": [
            "3d60ee395ccb54ec",
            "dde907c3411a52a8"
        ],
        "x": 790,
        "y": 120,
        "wires": [],
        "inputLabels": [
            "All"
        ],
        "l": true
    },
    {
        "id": "785d2003ca17893a",
        "type": "link out",
        "z": "ade35fbdd2d4754d",
        "name": "System Calls",
        "mode": "link",
        "links": [
            "eac33361a3bb910b"
        ],
        "x": 790,
        "y": 180,
        "wires": [],
        "l": true
    },
    {
        "id": "ef3788c737c5f2da",
        "type": "link out",
        "z": "ade35fbdd2d4754d",
        "name": "Calls (active)",
        "mode": "link",
        "links": [
            "652bfa7b3aee55d4"
        ],
        "x": 550,
        "y": 120,
        "wires": [],
        "l": true
    },
    {
        "id": "0a412610c83e77a8",
        "type": "function",
        "z": "ade35fbdd2d4754d",
        "name": "Count Calls",
        "func": "// Record system number/shortname mapping\nvar systems = global.get(\"systems\");\nif (systems === undefined) {\n    systems = {};\n    global.set(\"systems\", systems);\n}\n\nif (msg.payload.type == \"systems\") {\n    for (var i = 0; i < msg.payload.systems.length; i++) {\n        var sys_name = msg.payload.systems[i].sys_name\n        var sys_num = msg.payload.systems[i].sys_num\n\n        systems[sys_num] = sys_name;\n        global.set(\"systems\", systems);\n    }\n    return;\n\n} else {\n    // Initialize count with known shortnames\n    var activeCalls = {};\n    var knownSystems = Object.values(systems);\n\n    for (let k in knownSystems) {\n        activeCalls[knownSystems[k]] = 0;\n    }\n\n    // Count calls by shortname\n    var sys_name;\n    var sys_num;\n    var callTotal = 0;\n\n    for (var i = 0; i < msg.payload.calls.length; i++) {\n        sys_name = msg.payload.calls[i].sys_name\n        sys_num = msg.payload.calls[i].sys_num\n\n        if (!activeCalls[sys_name]) {\n            activeCalls[sys_name] = 0;\n        }\n\n        // Ignore unstarted calls\n        // if (call_length > 0) {\n        activeCalls[sys_name] = activeCalls[sys_name] + 1;\n        callTotal = callTotal + 1;\n        // }\n\n        systems[sys_num] = sys_name;\n        global.set(\"systems\", systems);\n    }\n\n    // Generate payload by shortname\n    var msgBySys = []\n    var nodeStatus = \"\"\n\n    for (let sysName in activeCalls) {\n        var sysCalls = Number(activeCalls[sysName])\n        var sysStatus = sysName + \":\" + sysCalls\n        nodeStatus = (nodeStatus == \"\") ? sysStatus : nodeStatus + \", \" + sysStatus;\n        msgBySys.push({\n            payload: sysCalls,\n            topic: sysName,\n            timestamp: msg.payload.timestamp\n        });\n    }\n\n    // Generate payload for total calls\n    var msgAll = {\n        payload: callTotal,\n        topic: \"all\",\n        timestamp: msg.payload.timestamp\n    };\n    msgBySys.push(msgAll);\n\n    var dots = context.get(\"dots\");\n    dots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\n    context.set(\"dots\", dots)\n\n    node.status({ fill: \"green\", shape: dots, text: nodeStatus });\n    return [msgAll, msgBySys];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({fill:\"yellow\",shape:\"dot\",text:\"waiting\"});",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 180,
        "wires": [
            [
                "4bfe4a6697fee1a3"
            ],
            [
                "785d2003ca17893a"
            ]
        ]
    },
    {
        "id": "af25bf7141b55733",
        "type": "ui_text",
        "z": "ade35fbdd2d4754d",
        "group": "a7d57a4072f80f04",
        "order": 10,
        "width": 3,
        "height": 1,
        "name": "Max",
        "label": "Max:",
        "format": "{{msg.payload.max | number:0}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 830,
        "y": 660,
        "wires": []
    },
    {
        "id": "476232d8a89cd269",
        "type": "ui_text",
        "z": "ade35fbdd2d4754d",
        "group": "a7d57a4072f80f04",
        "order": 11,
        "width": 4,
        "height": 1,
        "name": "Min",
        "label": "Min:",
        "format": "{{msg.payload.min | number:0}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 830,
        "y": 620,
        "wires": []
    },
    {
        "id": "686195a120fef396",
        "type": "ui_text",
        "z": "ade35fbdd2d4754d",
        "group": "a7d57a4072f80f04",
        "order": 12,
        "width": 4,
        "height": 1,
        "name": "Avg",
        "label": "5m Avg:  ",
        "format": "{{msg.payload.avg | number:1}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 830,
        "y": 580,
        "wires": []
    },
    {
        "id": "b4854fb213c4f27f",
        "type": "ui_gauge",
        "z": "ade35fbdd2d4754d",
        "name": "",
        "group": "a7d57a4072f80f04",
        "order": 1,
        "width": 11,
        "height": 7,
        "gtype": "gage",
        "title": "Current Call Rate",
        "label": "Calls/Min",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 580,
        "wires": []
    },
    {
        "id": "bf6f18bfdb3cce95",
        "type": "ui_chart",
        "z": "ade35fbdd2d4754d",
        "name": "Calls Per Minute",
        "group": "a7d57a4072f80f04",
        "order": 2,
        "width": 19,
        "height": 8,
        "label": "Calls Per Minute",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "step",
        "nodata": "Calls",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 340,
        "wires": [
            []
        ],
        "inputLabels": [
            "Calls"
        ]
    },
    {
        "id": "63754a53c812c6ba",
        "type": "ui_chart",
        "z": "ade35fbdd2d4754d",
        "name": "Calls Per Hour",
        "group": "a7d57a4072f80f04",
        "order": 14,
        "width": 15,
        "height": 8,
        "label": "Calls Per Hour",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "step",
        "nodata": "Calls",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 380,
        "wires": [
            []
        ],
        "inputLabels": [
            "Calls"
        ]
    },
    {
        "id": "12903897a619c6d9",
        "type": "ui_chart",
        "z": "ade35fbdd2d4754d",
        "name": "Calls Per Day",
        "group": "a7d57a4072f80f04",
        "order": 15,
        "width": 15,
        "height": 8,
        "label": "Calls Per Day",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "step",
        "nodata": "Calls",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 420,
        "wires": [
            []
        ],
        "inputLabels": [
            "Calls"
        ]
    },
    {
        "id": "d6426924627620d5",
        "type": "link in",
        "z": "18508c08a9ca4084",
        "name": "1",
        "links": [],
        "x": 270,
        "y": 480,
        "wires": [
            [
                "67972615eb05a6c4",
                "9a8a76764bc8cc9a"
            ]
        ],
        "l": true
    },
    {
        "id": "67972615eb05a6c4",
        "type": "link out",
        "z": "18508c08a9ca4084",
        "name": "Return",
        "mode": "return",
        "links": [],
        "x": 470,
        "y": 480,
        "wires": [],
        "l": true
    },
    {
        "id": "9a8a76764bc8cc9a",
        "type": "switch",
        "z": "18508c08a9ca4084",
        "name": "",
        "property": "stat",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "rate",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "avg",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "min",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "max",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 470,
        "y": 540,
        "wires": [
            [
                "dcc985c7596a948b"
            ],
            [
                "45cde8aa690eaf8b",
                "d7301d3f5f72cb1d"
            ],
            [
                "2481cb33d85809ef"
            ],
            [
                "63f6308d1c845e24"
            ]
        ]
    },
    {
        "id": "b5344063e636d21e",
        "type": "inject",
        "z": "18508c08a9ca4084",
        "name": "Clear Chart",
        "props": [
            {
                "p": "stat",
                "v": "avg",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 310,
        "y": 600,
        "wires": [
            [
                "9a8a76764bc8cc9a"
            ]
        ]
    },
    {
        "id": "96ac19ad3b9e2041",
        "type": "link in",
        "z": "18508c08a9ca4084",
        "name": "0",
        "links": [],
        "x": 270,
        "y": 260,
        "wires": [
            [
                "573bb0b347eb6e3e",
                "9a36ce8a72adb101"
            ]
        ],
        "l": true
    },
    {
        "id": "573bb0b347eb6e3e",
        "type": "link out",
        "z": "18508c08a9ca4084",
        "name": "Return",
        "mode": "return",
        "links": [],
        "x": 470,
        "y": 260,
        "wires": [],
        "l": true
    },
    {
        "id": "9a36ce8a72adb101",
        "type": "switch",
        "z": "18508c08a9ca4084",
        "name": "",
        "property": "stat",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "rate",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "avg",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "min",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "max",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 470,
        "y": 320,
        "wires": [
            [
                "3cef6a1c017a903d"
            ],
            [
                "d2e47aaab81851ae",
                "3cb1c71bd2cfa23c"
            ],
            [
                "7fc6ad040ffbba21"
            ],
            [
                "d2837fb73a83f46f"
            ]
        ]
    },
    {
        "id": "76d1e274c0f8fc2a",
        "type": "inject",
        "z": "18508c08a9ca4084",
        "name": "Clear Chart",
        "props": [
            {
                "p": "stat",
                "v": "avg",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "9a36ce8a72adb101"
            ]
        ]
    },
    {
        "id": "3f0cdfc5fb1d27d3",
        "type": "link call",
        "z": "18508c08a9ca4084",
        "name": "To sys_num",
        "links": [],
        "linkType": "dynamic",
        "timeout": "10",
        "x": 710,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "a64eaf7d67b95e7d",
        "type": "link in",
        "z": "18508c08a9ca4084",
        "name": "Receive Rates",
        "links": [
            "61025a13de557680"
        ],
        "x": 245,
        "y": 60,
        "wires": [
            [
                "ac2541e70008466a"
            ]
        ]
    },
    {
        "id": "2481cb33d85809ef",
        "type": "ui_text",
        "z": "18508c08a9ca4084",
        "group": "3d32a5f038774cc5",
        "order": 8,
        "width": 3,
        "height": 1,
        "name": "Min2",
        "label": "Min:",
        "format": "{{msg.payload | number:0}} msg/s",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 560,
        "wires": []
    },
    {
        "id": "45cde8aa690eaf8b",
        "type": "ui_text",
        "z": "18508c08a9ca4084",
        "group": "3d32a5f038774cc5",
        "order": 9,
        "width": 4,
        "height": 1,
        "name": "Avg2",
        "label": "Avg:  ",
        "format": "{{msg.payload | number:1}} msg/s",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 520,
        "wires": []
    },
    {
        "id": "63f6308d1c845e24",
        "type": "ui_text",
        "z": "18508c08a9ca4084",
        "group": "3d32a5f038774cc5",
        "order": 10,
        "width": 3,
        "height": 1,
        "name": "Max2",
        "label": "Max:",
        "format": "{{msg.payload | number:0}} msg/s",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 600,
        "wires": []
    },
    {
        "id": "7fc6ad040ffbba21",
        "type": "ui_text",
        "z": "18508c08a9ca4084",
        "group": "3d32a5f038774cc5",
        "order": 3,
        "width": 3,
        "height": 1,
        "name": "Min",
        "label": "Min:",
        "format": "{{msg.payload | number:0}} msg/s",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 340,
        "wires": []
    },
    {
        "id": "3cb1c71bd2cfa23c",
        "type": "ui_text",
        "z": "18508c08a9ca4084",
        "group": "3d32a5f038774cc5",
        "order": 4,
        "width": 4,
        "height": 1,
        "name": "Avg",
        "label": "Avg:  ",
        "format": "{{msg.payload | number:1}} msg/s",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 300,
        "wires": []
    },
    {
        "id": "d2837fb73a83f46f",
        "type": "ui_text",
        "z": "18508c08a9ca4084",
        "group": "3d32a5f038774cc5",
        "order": 5,
        "width": 3,
        "height": 1,
        "name": "Max",
        "label": "Max:",
        "format": "{{msg.payload | number:0}} msg/s",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 380,
        "wires": []
    },
    {
        "id": "dcc985c7596a948b",
        "type": "ui_gauge",
        "z": "18508c08a9ca4084",
        "name": "Gage2",
        "group": "3d32a5f038774cc5",
        "order": 6,
        "width": 10,
        "height": 8,
        "gtype": "gage",
        "title": "<b>{{msg.caption}}</b>",
        "label": "msg/s",
        "format": "{{value | number:0}}",
        "min": 0,
        "max": "40",
        "colors": [
            "#ca3838",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "10",
        "seg2": "25",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 480,
        "wires": []
    },
    {
        "id": "3cef6a1c017a903d",
        "type": "ui_gauge",
        "z": "18508c08a9ca4084",
        "name": "Gage",
        "group": "3d32a5f038774cc5",
        "order": 1,
        "width": 10,
        "height": 8,
        "gtype": "gage",
        "title": "<b>{{msg.caption}}</b>",
        "label": "msg/s",
        "format": "{{value | number:0}}",
        "min": 0,
        "max": "40",
        "colors": [
            "#ca3838",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "10",
        "seg2": "25",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 260,
        "wires": []
    },
    {
        "id": "d7301d3f5f72cb1d",
        "type": "ui_chart",
        "z": "18508c08a9ca4084",
        "name": "Grph2",
        "group": "3d32a5f038774cc5",
        "order": 7,
        "width": 20,
        "height": 9,
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 730,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "d2e47aaab81851ae",
        "type": "ui_chart",
        "z": "18508c08a9ca4084",
        "name": "Graph",
        "group": "3d32a5f038774cc5",
        "order": 2,
        "width": 20,
        "height": 9,
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 730,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "ae45e59443c68422",
        "type": "link in",
        "z": "18508c08a9ca4084",
        "name": "2",
        "links": [],
        "x": 270,
        "y": 680,
        "wires": [
            [
                "d4754974fcdf9d55",
                "4694bef75336d4d1"
            ]
        ],
        "l": true
    },
    {
        "id": "d4754974fcdf9d55",
        "type": "link out",
        "z": "18508c08a9ca4084",
        "name": "Return",
        "mode": "return",
        "links": [],
        "x": 470,
        "y": 680,
        "wires": [],
        "l": true
    },
    {
        "id": "4694bef75336d4d1",
        "type": "switch",
        "z": "18508c08a9ca4084",
        "name": "",
        "property": "stat",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "rate",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "avg",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "min",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "max",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 470,
        "y": 740,
        "wires": [
            [
                "31500e336198af0c"
            ],
            [
                "7598c746286c6700",
                "a46e2c6d3c288722"
            ],
            [
                "de12978674fa970f"
            ],
            [
                "7fea77d0325e163d"
            ]
        ]
    },
    {
        "id": "d5b26614d349dd07",
        "type": "inject",
        "z": "18508c08a9ca4084",
        "name": "Clear Chart",
        "props": [
            {
                "p": "stat",
                "v": "avg",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 310,
        "y": 800,
        "wires": [
            [
                "4694bef75336d4d1"
            ]
        ]
    },
    {
        "id": "de12978674fa970f",
        "type": "ui_text",
        "z": "18508c08a9ca4084",
        "group": "3d32a5f038774cc5",
        "order": 13,
        "width": 3,
        "height": 1,
        "name": "Min3",
        "label": "Min:",
        "format": "{{msg.payload | number:0}} msg/s",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 760,
        "wires": []
    },
    {
        "id": "7598c746286c6700",
        "type": "ui_text",
        "z": "18508c08a9ca4084",
        "group": "3d32a5f038774cc5",
        "order": 14,
        "width": 4,
        "height": 1,
        "name": "Avg3",
        "label": "Avg:  ",
        "format": "{{msg.payload | number:1}} msg/s",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 720,
        "wires": []
    },
    {
        "id": "7fea77d0325e163d",
        "type": "ui_text",
        "z": "18508c08a9ca4084",
        "group": "3d32a5f038774cc5",
        "order": 15,
        "width": 3,
        "height": 1,
        "name": "Max3",
        "label": "Max:",
        "format": "{{msg.payload | number:0}} msg/s",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 800,
        "wires": []
    },
    {
        "id": "31500e336198af0c",
        "type": "ui_gauge",
        "z": "18508c08a9ca4084",
        "name": "Gage3",
        "group": "3d32a5f038774cc5",
        "order": 11,
        "width": 10,
        "height": 8,
        "gtype": "gage",
        "title": "<b>{{msg.caption}}</b>",
        "label": "msg/s",
        "format": "{{value | number:0}}",
        "min": 0,
        "max": "40",
        "colors": [
            "#ca3838",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "10",
        "seg2": "25",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 680,
        "wires": []
    },
    {
        "id": "a46e2c6d3c288722",
        "type": "ui_chart",
        "z": "18508c08a9ca4084",
        "name": "Grph3",
        "group": "3d32a5f038774cc5",
        "order": 12,
        "width": 20,
        "height": 9,
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 730,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "ac2541e70008466a",
        "type": "function",
        "z": "18508c08a9ca4084",
        "name": "Split/Average",
        "func": "function roundToTwo(num) {\n    return +(Math.round(num + \"e+2\") + \"e-2\");\n}\n\nvar rateData = context.get(\"rateData\", \"memoryOnly\");\nif (rateData === undefined) {\n    rateData = {};\n    context.set(\"rateData\", rateData, \"memoryOnly\");\n}\n\nvar nextAvg = context.get(\"nextAvg\", \"memoryOnly\");\nif (nextAvg === undefined) {\n    nextAvg = Number(msg.payload.timestamp) + 60\n    context.set(\"nextAvg\", nextAvg, \"memoryOnly\");\n}\n\nvar dots = context.get(\"dots\", \"memoryOnly\");\ndots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots, \"memoryOnly\");\n\nvar statusRates = \"\";\n\nfor (var i = 0; i < msg.payload.rates.length; i++) {\n\n    var decoderate = roundToTwo(msg.payload.rates[i][\"decoderate\"])\n    var sys_num = msg.payload.rates[i][\"sys_num\"]\n    var sys_name = msg.payload.rates[i][\"sys_name\"]\n    var freq = (msg.payload.rates[i][\"control_channel\"] / 1000000).toFixed(6)\n\n    if (rateData[sys_num] === undefined) {\n        rateData[sys_num] = {\n            \"rate\": 0,\n            \"count\": 0,\n            \"total\": 0,\n            \"avg\": 0,\n            \"min\": decoderate,\n            \"max\": decoderate,\n            \"freq\": freq\n        };\n    }\n\n    rateData[sys_num].rate = decoderate\n    rateData[sys_num].count += 1;\n    rateData[sys_num].total = roundToTwo(rateData[sys_num].total + decoderate);\n\n    rateData[sys_num].avg = roundToTwo(rateData[sys_num].total / rateData[sys_num].count);\n    if (decoderate > rateData[sys_num].max) { rateData[sys_num].max = decoderate; }\n    if (decoderate < rateData[sys_num].min) { rateData[sys_num].min = decoderate; }\n\n    rateData[sys_num].freq = freq;\n\n    var rate_msg = {\n        payload: Number(decoderate),\n        stat: \"rate\",\n        caption: sys_name + \" [\" + sys_num + \"] \" + freq,\n        target: String(sys_num),\n    }\n\n    statusRates = (statusRates == \"\") ? rateData[sys_num].count + \": \" + decoderate : statusRates + \", \" + decoderate;\n    node.send(rate_msg);\n\n    node.status({ fill: \"green\", shape: dots, text: statusRates });\n}\n\nif (Number(msg.payload.timestamp) >= Number(nextAvg)) {\n    const outputs = [\"avg\", \"min\", \"max\"];\n\n    for (let system in rateData) {\n        for (var key in outputs) {\n            var stat_msg = {\n                target: String(system),\n                stat: outputs[key],\n                topic: rateData[system][\"freq\"],\n                payload: rateData[system][outputs[key]]\n            }\n            node.send(stat_msg);\n        }\n    }\n    node.status({ fill: \"yellow\", shape: dots, text: \"sent \" + statusRates });\n\n    nextAvg = Number(msg.payload.timestamp) + 60\n    context.set(\"nextAvg\", nextAvg, \"memoryOnly\");\n\n    rateData = {}\n}\n\ncontext.set(\"rateData\", rateData, \"memoryOnly\");\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({fill:\"yellow\",shape:\"dot\",text:\"waiting\"});",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 120,
        "wires": [
            [
                "3f0cdfc5fb1d27d3"
            ]
        ]
    },
    {
        "id": "4f0d0cc44435a1a7",
        "type": "link in",
        "z": "182d61c8f9fd79f4",
        "name": "Receieve Recorder",
        "links": [
            "dbc80b636c1b04ca",
            "da48d81e41d21b6d",
            "1e535b703f4acccd"
        ],
        "x": 305,
        "y": 60,
        "wires": [
            [
                "92cfa384e4525d3e"
            ]
        ]
    },
    {
        "id": "c8c40b3480527042",
        "type": "link in",
        "z": "182d61c8f9fd79f4",
        "name": "Receive Recorders",
        "links": [
            "f188a930b2571e2c"
        ],
        "x": 305,
        "y": 120,
        "wires": [
            [
                "92cfa384e4525d3e"
            ]
        ]
    },
    {
        "id": "957f0a81ab4f86ea",
        "type": "link in",
        "z": "182d61c8f9fd79f4",
        "name": "Receive Call_Start",
        "links": [
            "eed418cce0e3f531"
        ],
        "x": 305,
        "y": 240,
        "wires": [
            [
                "90c685d60364627a"
            ]
        ]
    },
    {
        "id": "f2929325a5d0ce82",
        "type": "link in",
        "z": "182d61c8f9fd79f4",
        "name": "Recieve Call_End",
        "links": [
            "b9f3064564340f03"
        ],
        "x": 305,
        "y": 300,
        "wires": [
            [
                "90c685d60364627a"
            ]
        ]
    },
    {
        "id": "74999e3083f4b402",
        "type": "link in",
        "z": "182d61c8f9fd79f4",
        "name": "Receive Calls_Active",
        "links": [
            "b4874e8bfc9e4d0f"
        ],
        "x": 305,
        "y": 360,
        "wires": [
            [
                "90c685d60364627a"
            ]
        ]
    },
    {
        "id": "90c685d60364627a",
        "type": "function",
        "z": "182d61c8f9fd79f4",
        "name": "Calls",
        "func": "var dots = context.get(\"dots\", \"memoryOnly\");\ndots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots, \"memoryOnly\")\n\nconst sortmsg = {\n       payload: {\n              command: \"setSort\",\n              arguments: [[{ column: \"call_num\", dir: \"asc\" }]],\n              returnPromise: false\n       }\n};\n\nfunction boldIfTrue(text, compare) {\n       if (text == compare) {\n              return \"<span style='font-weight:bold; background-color:#cc0000;'>\" + text + \"</span>\";\n       };\n       return text;\n}\n\nvar callData = flow.get(\"callData\", \"memoryOnly\");\nif (callData === undefined) {\n       callData = {};\n       flow.set(\"callData\", callData, \"memoryOnly\");\n}\n\n// update calls using call_num as a unique ID\nif (msg.payload.type == \"calls_active\") {\n       for (var i = 0; i < msg.payload.calls.length; i++) {\n              var cnum = msg.payload.calls[i].call_num;\n              callData[cnum] = msg.payload.calls[i];\n              callData[cnum].freq = (msg.payload.calls[i].freq / 1000000).toFixed(6);\n              callData[cnum].update_time = Math.round(+new Date() / 1000);\n\n              // preserve only the newest encypted call on the same TG\n              if (callData[cnum].call_state_type == \"MONITORING\") {\n                     for (let i in callData) {\n                            if (callData[i].talkgroup == callData[cnum].talkgroup) {\n                                   if (i > cnum) {\n                                          callData[cnum].update_time = 0;\n                                   }\n                            }\n                     }\n              }\n       }\n} else if (msg.payload.type == \"call_start\") {\n       var cnum = msg.payload.call.call_num;\n       callData[cnum] = msg.payload.call;\n       callData[cnum].freq = (msg.payload.call.freq / 1000000).toFixed(6);\n       callData[cnum].update_time = Math.round(+new Date() / 1000);\n\n       // preserve only the newest encypted call on the same TG\n       if (callData[cnum].call_state_type == \"MONITORING\") {\n              for (let i in callData) {\n                     if (callData[i].talkgroup == callData[cnum].talkgroup) {\n                            if (i > cnum) {\n                                   callData[cnum].update_time = 0;\n                            }\n                     }\n              }\n       }\n\n} else if (msg.payload.type == \"call_end\") {\n       var cnum = msg.payload.call.call_num;\n       callData[cnum].call_state_type = \"COMPLETED\";\n       callData[cnum].rec_state_type = \"STOPPED\";\n       callData[cnum].mon_state_type = \"UNSPEC\";\n       callData[cnum].length = msg.payload.call.length;\n       callData[cnum].stop_time = msg.payload.call.stop_time;\n}\n\n// Prune calls 30 seconds after last update\nvar pruneTime = Math.round(+new Date() / 1000);\nvar num_calls = 0;\nfor (let i in callData) {\n       callData[i].call_state_type = boldIfTrue(callData[i].call_state_type, \"RECORDING\")\n       callData[i].encrypted = boldIfTrue(callData[i].encrypted, \"true\")\n\n       if (callData[i].call_state_type == \"COMPLETED\") {\n              callData[i].rec_num = \"\";\n              callData[i].src_num = \"\";\n       }\n\n       if (callData[i].update_time < pruneTime - 15) {\n              delete callData[i];\n       }\n\n       num_calls++;\n}\n\nnode.status({ fill: \"red\", shape: dots, text: msg.payload.type + \" \" + num_calls });\n\nmsg.payload = Object.values(callData);\nflow.set(\"callData\", callData, \"memoryOnly\");\n\nreturn ([[msg, sortmsg]]);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 280,
        "wires": [
            [
                "b2f9679231197c23"
            ]
        ]
    },
    {
        "id": "92cfa384e4525d3e",
        "type": "function",
        "z": "182d61c8f9fd79f4",
        "name": "Recorders",
        "func": "var dots = context.get(\"dots\", \"memoryOnly\");\ndots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots, \"memoryOnly\")\n\nfunction boldIfTrue(text, compare){\n    if (text == compare) {\n        return \"<span style='font-weight:bold; background-color:#cc0000;'>\"+text+\"</span>\";\n    };\n    return text;\n}\n\n\nconst sortmsg = {\n    payload: {\n        command: \"setSort\",\n        arguments: [[{ column: \"id\", dir: \"asc\" }]],\n        returnPromise: false\n    }\n};\n\nvar recData = flow.get(\"recData\", \"memoryOnly\");\nif (recData === undefined) {\n    recData = {};\n    flow.set(\"recData\", recData, \"memoryOnly\");\n}\n\nif (msg.payload.type == \"recorders\") {\n    for (var i = 0; i < msg.payload.recorders.length; i++) {\n        var id = msg.payload.recorders[i].id\n        recData[id] = msg.payload.recorders[i]\n        recData[id].freq = (recData[id].freq / 1000000).toFixed(6)\n    }\n\n//<span style='backgroundcolor:#3FB449; font-weight:bold;'>asdasas</span>..\n\n} else if (msg.payload.type == \"recorder\") {\n    if (recData.len > 0) {\n        var id = msg.payload.recorder.id\n        recData[id] = msg.payload.recorder\n        recData[id].freq = (recData[id].freq / 1000000).toFixed(6)\n    }\n}\n\nfor (let i in recData) {\n    recData[i].squelched = boldIfTrue(recData[i].squelched, \"false\")\n    recData[i].rec_state_type = boldIfTrue(recData[i].rec_state_type, \"RECORDING\")\n    if (recData[i].rec_state_type == \"AVAILABLE\") {\n        recData[i].freq = \"\";\n    }\n}\n\nvar newmsg = { payload: Object.values(recData) };\nnode.send([[newmsg]]) //, sortmsg]]);\nnode.status({ fill: \"red\", shape: dots, text: msg.payload.type + \" \" + newmsg.payload.length });\nflow.set(\"recData\", recData, \"memoryOnly\");\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 160,
        "wires": [
            [
                "50bc1a424fd15a5e"
            ]
        ]
    },
    {
        "id": "c8f89514ed7651b5",
        "type": "ui_ui_control",
        "z": "182d61c8f9fd79f4",
        "name": "Refresh",
        "events": "all",
        "x": 520,
        "y": 200,
        "wires": [
            [
                "90c685d60364627a",
                "92cfa384e4525d3e"
            ]
        ]
    },
    {
        "id": "b2f9679231197c23",
        "type": "ui_table",
        "z": "182d61c8f9fd79f4",
        "group": "9c5239938a0d6b38",
        "name": "Calls",
        "order": 1,
        "width": 30,
        "height": 10,
        "columns": [
            {
                "field": "call_num",
                "title": "Call",
                "width": "75",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "sys_name",
                "title": "System",
                "width": "75",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "rec_num",
                "title": "R",
                "width": "50",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "src_num",
                "title": "S",
                "width": "50",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "freq",
                "title": "Freq",
                "width": "100",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "talkgroup",
                "title": "TG",
                "width": "75",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "talkgroup_alpha_tag",
                "title": "TG Tag",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "unit",
                "title": "Source",
                "width": "100",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "encrypted",
                "title": "Encrypt",
                "width": "100",
                "align": "center",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "phase2",
                "title": "P2",
                "width": "100",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "analog",
                "title": "Analog",
                "width": "100",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "call_state_type",
                "title": "CallState",
                "width": "",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "rec_state_type",
                "title": "RecS",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "mon_state_type",
                "title": "Mon",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "elapsed",
                "title": "Elap",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "length",
                "title": "len",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 970,
        "y": 280,
        "wires": []
    },
    {
        "id": "50bc1a424fd15a5e",
        "type": "ui_table",
        "z": "182d61c8f9fd79f4",
        "group": "9c5239938a0d6b38",
        "name": "Recorders",
        "order": 12,
        "width": 30,
        "height": 8,
        "columns": [
            {
                "field": "id",
                "title": "ID",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "type",
                "title": "Type",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "src_num",
                "title": "Source",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "rec_num",
                "title": "Recorder",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "freq",
                "title": "Freq",
                "width": "",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "count",
                "title": "Count",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "duration",
                "title": "Duration",
                "width": "",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "rec_state_type",
                "title": "RecState",
                "width": "",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "squelched",
                "title": "Squelched",
                "width": "",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 950,
        "y": 160,
        "wires": []
    },
    {
        "id": "e326c09bc69650a8",
        "type": "debug",
        "z": "0e5e68a727329e5f",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 580,
        "wires": []
    },
    {
        "id": "8782700c40a5c600",
        "type": "link out",
        "z": "0e5e68a727329e5f",
        "name": "To Unit Table",
        "mode": "link",
        "links": [
            "a748dd3175fc0641"
        ],
        "x": 690,
        "y": 100,
        "wires": [],
        "l": true
    },
    {
        "id": "f0a5aa8601468b60",
        "type": "link out",
        "z": "0e5e68a727329e5f",
        "name": "To Unit Table",
        "mode": "link",
        "links": [
            "a748dd3175fc0641"
        ],
        "x": 710,
        "y": 620,
        "wires": [],
        "l": true
    },
    {
        "id": "3a9dc1af3e45e2c8",
        "type": "link out",
        "z": "0e5e68a727329e5f",
        "name": "To Table Mgr.",
        "mode": "link",
        "links": [
            "63364fe34d6bb3fb"
        ],
        "x": 710,
        "y": 660,
        "wires": [],
        "l": true
    },
    {
        "id": "d81c934a6609ffdb",
        "type": "debug",
        "z": "0e5e68a727329e5f",
        "name": "MQTT debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 60,
        "wires": []
    },
    {
        "id": "325ff81c8cab1dc4",
        "type": "function",
        "z": "0e5e68a727329e5f",
        "name": "Parse Input",
        "func": "var dots = context.get(\"dots\");\ndots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots)\n\n// Status\nnode.status({ fill: \"yellow\", shape: dots, text: \"waiting\" });\n\n// Talkgroup Data Table\nvar tgData = flow.get(\"tgData\");\nif (tgData === undefined) {\n    tgData = {};\n    flow.set(\"tgData\", tgData);\n}\n// Unit Data Table\nvar unitsData = flow.get(\"unitData\");\nif (unitsData === undefined) {\n    unitsData = {};\n    flow.set(\"unitData\", unitsData);\n}\n\n// Display Table \nvar tData = flow.get(\"tData\");\nif (tData === undefined) {\n    tData = {};\n    flow.set(\"tData\", tData);\n}\n\n// Control channel messages\nconst msg_types = [\n    \"end\", \"xans_req\", \"location\", \"join\",\n    \"call\", \"on\", \"off\", \"data\", \"ackresp\"];\n\n// Control messages with talkgroup info\nconst msg_tg_types = [\n    \"end\", \"ans_req\", \"location\", \"join\", \"call\"];\n\nconst unknowns = {\n    \"-1\": \"UNKNOWN\",\n    \"0\": \"NONE\",\n    \"12582912\": \"Test\"\n}\n\n// Get Type\nvar type = msg.payload.type;\n\n// Parse only enabled messages\nif (msg_types.includes(type)) {\n    var system = msg.payload[type].system;\n    var unit = msg.payload[type].unit;\n    var unitalpha = msg.payload[type].unit_alpha;\n\n    if (unit in unknowns) {\n        unitalpha = unknowns[unit];\n    }\n\n    var args = {};\n    // Unit ID\n    args[\"id\"] = unit;\n    // Unit Alpha\n    args[\"alpha\"] = unitalpha\n    // Message Type\n    args[\"text\"] = type + \"\";\n    // ISO Timestampe (hidden) and local time\n    args[\"timestamp\"] = (new Date()).toISOString();\n    args[\"local\"] = new Date(args[\"timestamp\"]).toLocaleString(\"en-US\", { timeZoneName: \"short\" });\n    // On/Encrypted/Off\n    args[\"status\"] = 100;\n\n\n    // Initialize unit rceords\n    var unitdata = unitsData[unit];\n    if (unitdata === undefined) {\n        unitdata = {};\n    }\n    if (unitalpha != \"\") {\n        unitdata.alpha = unitalpha;\n    }\n    if (unitdata.subs === undefined) {\n        unitdata.subs = [];\n    }\n\n    // Parse messages with TG info\n    if (msg_tg_types.includes(type)) {\n        var tgnum = msg.payload[type].talkgroup;\n        var tgalpha = msg.payload[type].talkgroup_alpha_tag \n\n        if (tgnum in unknowns) {\n            tgalpha = unknowns[tgnum];\n        }\n        args[\"talkgroup\"] = tgnum + \" [\" + tgalpha + \"]\";\n\n        // Initialize talkgroup records\n        var talkdata = tgData[tgnum];\n        if (talkdata === undefined) {\n            talkdata = {};\n        }\n        if (tgalpha != \"\") {\n            talkdata.alpha = tgalpha;\n        }\n\n        if (talkdata.subs === undefined) {\n            talkdata.subs = [];\n        }\n\n        // Add unit to talkgroup records\n        if (!talkdata.subs.includes(unit)) {\n            talkdata.subs.push(unit);\n            tgData[tgnum] = talkdata;\n        }\n\n        // Add talkgroups to unit records\n        if (!unitdata.subs.includes(tgnum)) {\n            unitdata.subs.push(tgnum);\n            unitsData[unit] = unitdata;\n        }\n    }\n\n    //  Check for special cases\n    switch (type) {\n        case \"off\":\n            // Display unit as red on table\n            args[\"status\"] = 0;\n            break;\n        case \"call\":\n            // Add encryption notes, display yellow if encrypted\n            if (msg.payload[type].encrypted == \"true\") {\n                talkdata.encrypted = true;\n                unitdata.encrypted = true;\n                args[\"talkgroup\"] = args[\"talkgroup\"] + \" [E]\";\n                args[\"status\"] = 50;\n            } else {\n                talkdata.encrypted = false;\n                unitdata.encrypted = false;\n            }\n            unitsData[unit] = unitdata;\n            tgData[tgnum] = talkdata;\n    }\n\n    node.status({ fill: \"green\", shape: dots, text: system + \" \" + type + \" \" + unit });\n\n    // Save datatables\n    tData[unit] = args;\n    flow.set(\"unitData\", unitsData);\n    flow.set(\"tgData\", tgData);\n    flow.set(\"tData\", tData);\n\n    // Send to table \n    msg.payload = {\n        command: \"updateOrAddData\",\n        arguments: [[args]],\n        returnPromise: true\n    }\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"yellow\", shape: \"ring\", text: \"waiting\" });",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "8782700c40a5c600"
            ]
        ],
        "info": "# updateOrAddData([row])\n\nadds a the row with a new id (same as addRow)"
    },
    {
        "id": "440070b44d55d985",
        "type": "link in",
        "z": "0e5e68a727329e5f",
        "name": "Status",
        "links": [
            "ca13c5ad9ca1628d",
            "74ebfa1aaf85150c"
        ],
        "x": 235,
        "y": 440,
        "wires": [
            [
                "eb4fa12a341e737e",
                "a56dc08df98f75b3"
            ]
        ]
    },
    {
        "id": "c3d54256fed6f167",
        "type": "change",
        "z": "0e5e68a727329e5f",
        "name": "Toggle Sort",
        "rules": [
            {
                "t": "set",
                "p": "sorted",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "549e0f18e16718a4",
        "type": "function",
        "z": "0e5e68a727329e5f",
        "name": "Table Manager",
        "func": "var dots = context.get(\"dots\");\ndots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots)\n\nvar status = { fill: \"yellow\", shape: dots, text: \"idle\" };\nvar success = (msg.topic && msg.topic === \"success\") || false;\n\n// initialize flow table\nvar tData = flow.get(\"tData\");\nif (tData === undefined) {\n    tData = [];\n    flow.set(\"tData\", tData);\n}\n\n// auto-sort message\nconst sortmsg = {\n    payload: {\n        command: \"setSort\",\n        arguments: [[{ column: \"timestamp\", dir: \"desc\" }]],\n        returnPromise: false\n    }\n};\n\n// label output message\nvar tLength = Object.keys(tData).length;\nvar caption = {\n    topic: \"caption\",\n    label: tLength + \" Units Recorded\",\n    text: \"-\"\n};\n\nswitch (typeof msg.payload) {\n    case \"string\":\n        switch (msg.payload) {\n            // refresh table on reload, hide timestamp column\n            case \"change\":\n                status = { fill: \"green\", shape: dots, text: \"table restored \" + tLength + \" rows\" };\n                caption.text = \"Table Restored\";\n                msg.payload = Object.values(tData)\n                msg.ui_control = { \"tabulator\": { \"columns\": [{ \"field\": \"timestamp\", \"visible\": false }] } };\n                break;\n        }\n        break;\n    case \"object\":\n        switch (msg.payload.command) {\n            case \"clearData\":\n                // clearData does not return a promise!\n                // clear the table data\n                status = { fill: \"green\", shape: dots, text: \"clearData: done\" };\n                tData = {};\n                flow.set(\"tData\", tData)\n                break;\n        }\n        // Handle lookup requests\n        var out_msg = { topic: \"id\", payload: {} };\n\n        // Lookup by unit/alpha\n        if ([\"id\", \"alpha\"].includes(msg.topic)) {\n            var unit = msg.payload.id;\n            out_msg.payload = { type: \"unit\", id: unit };\n            node.send([, out_msg]);\n        }\n        // lookup by talkgroup\n        else if ((msg.topic == \"talkgroup\") && (msg.payload.talkgroup != undefined)) {\n            var tg = (msg.payload.talkgroup).split(\" \", 1);\n            out_msg.payload = { type: \"talkgroup\", id: tg };\n            node.send([, out_msg]);\n        }\n        break;\n    default:\n        // likely a msg fom a ui-table command or callback\n        if (msg.hasOwnProperty(\"topic\") &&\n            msg.hasOwnProperty(\"ui_control\") &&\n            msg.ui_control.hasOwnProperty(\"callback\") &&\n            msg.hasOwnProperty(\"return\")) {\n            // message originates from a ui-table callback\n            if (success) {\n                switch (msg.return.command) {\n                    case \"updateOrAddData\":\n                        var stattext = msg.return.arguments[0][0].text + \" \" + msg.return.arguments[0][0].id;\n                        status.text = tLength + \" | \" + stattext;\n                        caption.text = stattext;\n                        break;\n                    default:\n                        status = { fill: \"yellow\", shape: dots, text: msg.return.command + \" unknown!\" };\n                        break;\n                }\n            } else {\n                status.text = msg.topic + \" \" + msg.error;\n            }\n        }\n        break;\n}\n\nif (success) status.fill = \"green\";\nnode.status(status);\nnode.send([msg, caption]);\n\n// send a sort command\nif (flow.get(\"sorted\") == true) {\n    return sortmsg;\n} else {\n    return;\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"yellow\", shape: \"ring\", text: \"idle\" });",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 260,
        "wires": [
            [
                "64b6b9f1f7bd0a09"
            ],
            [
                "74ebfa1aaf85150c"
            ]
        ],
        "icon": "font-awesome/fa-database",
        "info": "# simple ui-table handler\n## abstract\nUsing ui-table with commands offer the hole flexibilty of tabulator. The table can be manipulated down to cell level.\nAs the ui-table node only passes the commands to tabulator and receives promises back the node does not hold the table data. If the data should be available after refresh, tab change, new connections the flow is responsible to cache the data and all the manipulations.\nThis node takes care of most simple data manipulation commands and holds a copy of the data in `flow.context.tabledata`\n\n## details\n\n### row index (id)\n\nTo identify a [row a index](http://tabulator.info/docs/4.5/data#overview) column has to be defined. This colum defaults to `id` but can be changed by specifing a **field** by using `msg.ui_control`. In this example the row index is a simple counter adding up by one if a new line is added.\n\n### addRow command\n\n[details @ tabulator addRow docs](http://tabulator.info/docs/4.5/update#alter-add)\n\nYou can add a row by sending the `addRow` command. You can decide if the row adds on the top or at the bottom of table.\n\n### addOrUpdate command\n\n[details @ tabulator addOrUpdate docs](http://tabulator.info/docs/4.5/update#alter-update)\n\nTo update data the best way is to use the `addOrUpdate` command. If the row indetified by the index is not exeisting a new row will be added automatically\n\n### deleteRow command\n\n[details @ tabulator deleteRow docs](http://tabulator.info/docs/4.5/update#row)\n\nDelete one or more rows (passing an array always results in \"row not found error\"! I think there is an issue in tabulator)\n\n### clearData\n\n[details @ tabulator clearData docs](http://tabulator.info/docs/4.5/update#alter-empty)\n\nunfortunately this command (currently) do not send a promise back! So we have to pass it directly to the table handler"
    },
    {
        "id": "a748dd3175fc0641",
        "type": "link in",
        "z": "0e5e68a727329e5f",
        "name": "Unit Table",
        "links": [
            "160b986853d7b1de",
            "8782700c40a5c600",
            "f0a5aa8601468b60",
            "64b6b9f1f7bd0a09",
            "576cd9c73083091c",
            "f65a418ec2dafa2d",
            "f2d8443652f4577f",
            "692b52a3ee5c2362",
            "88d9fa309b1610b5",
            "0ee42894b0b05eeb",
            "8814e02aa9dc50ac"
        ],
        "x": 235,
        "y": 220,
        "wires": [
            [
                "d358fddba4eb7405"
            ]
        ]
    },
    {
        "id": "64b6b9f1f7bd0a09",
        "type": "link out",
        "z": "0e5e68a727329e5f",
        "name": "To Unit Table",
        "mode": "link",
        "links": [
            "a748dd3175fc0641"
        ],
        "x": 710,
        "y": 240,
        "wires": [],
        "l": true
    },
    {
        "id": "63364fe34d6bb3fb",
        "type": "link in",
        "z": "0e5e68a727329e5f",
        "name": "Table Recorder",
        "links": [
            "3a9dc1af3e45e2c8",
            "0cc79676ef20a8c9",
            "e88813fff4aa4da3",
            "5befbae4eb85d022",
            "64505aaa48883368"
        ],
        "x": 235,
        "y": 260,
        "wires": [
            [
                "549e0f18e16718a4"
            ]
        ]
    },
    {
        "id": "20f3af3c63554344",
        "type": "function",
        "z": "0e5e68a727329e5f",
        "name": "clear table",
        "func": "\nmsg.payload={\n    command:\"clearData\",\n    arguments: [],\n    returnPromise: true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 620,
        "wires": [
            [
                "f0a5aa8601468b60",
                "3a9dc1af3e45e2c8"
            ]
        ],
        "info": "# clear data\n\nunfortunately this command (currently) do not send a promise back! So we have to pass it directly to the table handler"
    },
    {
        "id": "42f334b0d27a48e5",
        "type": "inject",
        "z": "0e5e68a727329e5f",
        "name": "clear table",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 620,
        "wires": [
            [
                "20f3af3c63554344"
            ]
        ]
    },
    {
        "id": "4888a19a0f9062bf",
        "type": "inject",
        "z": "0e5e68a727329e5f",
        "name": "debug",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 580,
        "wires": [
            [
                "b15e37b895ec1a7f"
            ]
        ]
    },
    {
        "id": "b15e37b895ec1a7f",
        "type": "function",
        "z": "0e5e68a727329e5f",
        "name": "data fixer",
        "func": "// Display Table \nvar tData = flow.get(\"tData\");\nif (tData === undefined) {\n    tData = {};\n    flow.set(\"tData\", tData);\n}\n\nfor (let unit in tData) {\n    msg.topic = tData[unit].timestamp;\n    msg.payload = new Date(tData[unit].timestamp).toLocaleString(\"en-US\", {timeZoneName: \"short\"});\n    node.send(msg);\n    tData[unit].local = new Date(tData[unit].timestamp).toLocaleString(\"en-US\", { timeZoneName: \"short\" });\n    \n}\n\n\n//flow.set(\"tData\", tData);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 580,
        "wires": [
            [
                "e326c09bc69650a8"
            ]
        ],
        "info": "# clear data\n\nunfortunately this command (currently) do not send a promise back! So we have to pass it directly to the table handler"
    },
    {
        "id": "ca9ce83303b3bac4",
        "type": "link in",
        "z": "0e5e68a727329e5f",
        "name": "Receive Somersby Units",
        "links": [
            "388961acfb41db34",
            "b47a0c52a08c604b",
            "4344cb9783704cd2"
        ],
        "x": 235,
        "y": 60,
        "wires": [
            [
                "d81c934a6609ffdb",
                "325ff81c8cab1dc4"
            ]
        ]
    },
    {
        "id": "a56dc08df98f75b3",
        "type": "function",
        "z": "0e5e68a727329e5f",
        "name": "Lookup",
        "func": "\nconst topics = [\"alpha\", \"id\"];\n\nif (topics.includes(msg.topic)) {\n    var type = msg.payload.type;\n    var id = msg.payload.id\n\n    var out_type = \"\";\n    var out_title = \"\";\n\n    msg.caption = {};\n\n    // Pick Alpha Lookup Tables\n    // Display TGs associated with a UID\n    if (type == \"unit\") {\n        var data = flow.get(\"unitData\")[id];\n        var alpha = data.alpha ?? \"-\";\n\n        msg.caption.label = \"Unit\"\n        msg.caption.text = id + \" : \" + alpha;\n\n        var dataTable = flow.get(\"tgData\");\n        out_type = \"talkgroup\";\n        out_title = \"TG\";\n    }\n\n    // Display Units associated with a TG\n    else if (type == \"talkgroup\") {\n        var data = flow.get(\"tgData\")[id];\n        var alpha = data.alpha ?? \"-\";\n        var encrypt = data.encrypted ?? \"false\"\n\n        if (encrypt == true) { alpha = alpha + \" [E]\"; }\n\n        msg.caption.label = \"Talkgroup\"\n        msg.caption.text = id + \" : \" + alpha;\n\n        var dataTable = flow.get(\"unitData\");\n        out_type = \"unit\";\n        out_title = \"UID\";\n    }\n    node.status({ fill: \"green\", shape: \"ring\", text: type + \": \" + id });\n\n    // Get IDs\n    var subs = (data[\"subs\"]).sort((a, b) => a - b)\n\n    // Parse Messages\n    var tableout = []\n    for (let index = 0; index < subs.length; index++) {\n        var sub = {}\n        var id = subs[index];\n        var alphas = \"\";\n\n        if (id in dataTable) {\n            if (\"alpha\" in dataTable[id]) {\n                alphas = dataTable[id].alpha;\n            }\n        }\n        sub[\"id\"] = id;\n        sub[\"alpha\"] = alphas;\n        sub[\"type\"] = out_type;\n        tableout.push(sub)\n    }\n\n    //Send\n    msg.ui_control = { \"tabulator\": { \"columns\": [{ \"field\": \"id\", \"title\": out_title }] } };\n    msg.payload = tableout;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"yellow\", shape: \"ring\", text: \"waiting\" });",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 480,
        "wires": [
            [
                "da9805c7d97c94c2",
                "5c7f3aa051a351cf"
            ]
        ],
        "info": "# updateOrAddData([row])\n\nadds a the row with a new id (same as addRow)"
    },
    {
        "id": "ca13c5ad9ca1628d",
        "type": "link out",
        "z": "0e5e68a727329e5f",
        "name": "To Status >",
        "mode": "link",
        "links": [
            "440070b44d55d985"
        ],
        "x": 710,
        "y": 480,
        "wires": [],
        "l": true
    },
    {
        "id": "f5f8f867538773f9",
        "type": "ui_switch",
        "z": "0e5e68a727329e5f",
        "name": "",
        "label": "Auto-Update",
        "tooltip": "",
        "group": "b5e230bf4b46d85e",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "sorted",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 490,
        "y": 400,
        "wires": [
            [
                "c3d54256fed6f167"
            ]
        ]
    },
    {
        "id": "eb4fa12a341e737e",
        "type": "ui_text",
        "z": "0e5e68a727329e5f",
        "group": "b5e230bf4b46d85e",
        "order": 2,
        "width": 25,
        "height": 1,
        "name": "Status Text",
        "label": "{{label}}",
        "format": "{{text}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 330,
        "y": 400,
        "wires": []
    },
    {
        "id": "5c7f3aa051a351cf",
        "type": "ui_text",
        "z": "0e5e68a727329e5f",
        "d": true,
        "group": "b5e230bf4b46d85e",
        "order": 3,
        "width": 30,
        "height": 1,
        "name": "Table Label",
        "label": "{{caption.label}}",
        "format": "{{caption.text}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 490,
        "y": 440,
        "wires": [],
        "info": "{{msg.payload.caption}}"
    },
    {
        "id": "3b05002f712f3c98",
        "type": "ui_ui_control",
        "z": "0e5e68a727329e5f",
        "name": "Reload",
        "events": "all",
        "x": 320,
        "y": 300,
        "wires": [
            [
                "549e0f18e16718a4"
            ]
        ]
    },
    {
        "id": "d358fddba4eb7405",
        "type": "ui_table",
        "z": "0e5e68a727329e5f",
        "group": "b5e230bf4b46d85e",
        "name": "Unit Table",
        "order": 4,
        "width": 30,
        "height": 18,
        "columns": [
            {
                "field": "status",
                "title": "",
                "width": "40",
                "align": "center",
                "formatter": "traffic",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "id",
                "title": "Unit",
                "width": "75",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "alpha",
                "title": "AlphaText",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "timestamp",
                "title": "Timestamp",
                "width": "0",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "local",
                "title": "Local Time",
                "width": "220",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "text",
                "title": "Last TX",
                "width": "100",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "talkgroup",
                "title": "Last Talkgroup",
                "width": "300",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 320,
        "y": 220,
        "wires": [
            [
                "549e0f18e16718a4"
            ]
        ]
    },
    {
        "id": "da9805c7d97c94c2",
        "type": "ui_table",
        "z": "0e5e68a727329e5f",
        "d": true,
        "group": "b5e230bf4b46d85e",
        "name": "Side Table",
        "order": 5,
        "width": 30,
        "height": 16,
        "columns": [
            {
                "field": "id",
                "title": "ID",
                "width": "100",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "alpha",
                "title": "Alpha",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 490,
        "y": 480,
        "wires": [
            [
                "ca13c5ad9ca1628d"
            ]
        ]
    },
    {
        "id": "74ebfa1aaf85150c",
        "type": "link out",
        "z": "0e5e68a727329e5f",
        "name": "To Status >",
        "mode": "link",
        "links": [
            "440070b44d55d985"
        ],
        "x": 710,
        "y": 280,
        "wires": [],
        "l": true
    },
    {
        "id": "5c4bb131bc495452",
        "type": "link in",
        "z": "10c1c9e27e1c19f1",
        "name": "Recieve Call_End",
        "links": [
            "b9f3064564340f03"
        ],
        "x": 175,
        "y": 340,
        "wires": [
            [
                "af7a4ba074ae4962"
            ]
        ]
    },
    {
        "id": "af7a4ba074ae4962",
        "type": "function",
        "z": "10c1c9e27e1c19f1",
        "name": "Count Talkgroups",
        "func": "if (!flow.get(\"talkgroupCounts\")) {\n    flow.set(\"talkgroupCounts\", {});\n}\n\nvar sysName = msg.payload.call.sys_name;\nvar talkgroup = msg.payload.call.talkgroup;\nvar talkgroupTag = msg.payload.call.talkgroup_tag;\nvar talkgroupAlphaTag = msg.payload.call.talkgroup_alpha_tag;\n\nif (!flow.get(\"talkgroupCounts\")[talkgroup]) {\n    flow.get(\"talkgroupCounts\")[talkgroup] = {\n        talkgroupTag: talkgroupTag,\n        talkgroupAlphaTag: talkgroupAlphaTag,\n        talkgroup: talkgroup,\n        count: 1\n    };\n} else {\n    flow.get(\"talkgroupCounts\")[talkgroup].count++;\n}\n\nmsg.payload = Object.values(flow.get(\"talkgroupCounts\"));\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 340,
        "wires": [
            [
                "a53f75d0fec38dc1"
            ]
        ]
    },
    {
        "id": "250429d578dd3791",
        "type": "function",
        "z": "10c1c9e27e1c19f1",
        "name": "Sort Table",
        "func": "\nmsg.payload.sort(function(a, b) {\n    return b.count - a.count;\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 400,
        "wires": [
            [
                "2a4eba3cd079c259"
            ]
        ]
    },
    {
        "id": "a53f75d0fec38dc1",
        "type": "function",
        "z": "10c1c9e27e1c19f1",
        "name": "Sort Data",
        "func": "const data = msg.payload;\n\nconst unknownTG = [];\nconst knownTG = [];\n\nObject.keys(data).forEach(key => {\n    const entry = data[key];\n    if (entry.talkgroupAlphaTag === \"\") {\n        unknownTG.push(entry);\n    } else {\n        knownTG.push(entry);\n    }\n});\n\n\nunknownTG.sort((a, b) => b.count - a.count);\nknownTG.sort((a, b) => b.count - a.count);\n\n\nconst unknownTGMsg = { payload: unknownTG };\nconst knownTGMsg = { payload: knownTG };\n\n\nreturn [unknownTGMsg, knownTGMsg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 340,
        "wires": [
            [
                "2e62e079ca24ee6b"
            ],
            [
                "250429d578dd3791"
            ]
        ]
    },
    {
        "id": "2e62e079ca24ee6b",
        "type": "function",
        "z": "10c1c9e27e1c19f1",
        "name": "Sort Table",
        "func": "\nmsg.payload.sort(function(a, b) {\n    return b.count - a.count;\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 280,
        "wires": [
            [
                "e7e7e33ec35a335d"
            ]
        ]
    },
    {
        "id": "bf13fa34ac288bbf",
        "type": "inject",
        "z": "10c1c9e27e1c19f1",
        "name": "Clear Data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 600,
        "y": 500,
        "wires": [
            [
                "a53f75d0fec38dc1"
            ]
        ]
    },
    {
        "id": "e7e7e33ec35a335d",
        "type": "ui_table",
        "z": "10c1c9e27e1c19f1",
        "group": "82f80ef0cc5cc97b",
        "name": "Unknown Talk Groups",
        "order": 1,
        "width": 30,
        "height": 11,
        "columns": [
            {
                "field": "talkgroup",
                "title": "Talkgroup Number",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "count",
                "title": "Talkgroup Count",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1200,
        "y": 200,
        "wires": []
    },
    {
        "id": "2a4eba3cd079c259",
        "type": "ui_table",
        "z": "10c1c9e27e1c19f1",
        "group": "bd5a5f182a4afd16",
        "name": "Known Talk Groups",
        "order": 1,
        "width": 30,
        "height": 11,
        "columns": [
            {
                "field": "talkgroupTag",
                "title": "Talkgroup Agency",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "talkgroupAlphaTag",
                "title": "Talkgroup Name",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "talkgroup",
                "title": "Talkgroup Number",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "count",
                "title": "Talkgroup Count",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1190,
        "y": 480,
        "wires": []
    },
    {
        "id": "31e3acc42add71f9",
        "type": "link in",
        "z": "b67ee87b463ce07a",
        "name": "link in 2",
        "links": [
            "b47a0c52a08c604b"
        ],
        "x": 265,
        "y": 360,
        "wires": [
            [
                "6d14270a.14056c"
            ]
        ]
    },
    {
        "id": "dbc4597a91018d0b",
        "type": "ui_table",
        "z": "b67ee87b463ce07a",
        "group": "d76d78c0a7caadf3",
        "name": "",
        "order": 3,
        "width": 30,
        "height": 20,
        "columns": [
            {
                "field": "unit",
                "title": "Unit No.",
                "width": "100",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "unit_alpha_tag",
                "title": "Unit Alpha Tag",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "talkgroup",
                "title": "Last Seen Talkgroup No.",
                "width": "210",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "talkgroup_alpha_tag",
                "title": "Last Seen Talkgroup Tag",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "encrypted",
                "title": "Encrypted",
                "width": "150",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "count",
                "title": "Count",
                "width": "100",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1030,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "f01d99d12ef72d7c",
        "type": "inject",
        "z": "b67ee87b463ce07a",
        "name": "Clear Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 560,
        "y": 480,
        "wires": [
            [
                "8782209b57f45b82"
            ]
        ]
    },
    {
        "id": "8782209b57f45b82",
        "type": "function",
        "z": "b67ee87b463ce07a",
        "name": "Clear Stored Data",
        "func": "flow.set('unitDetails', {}); // Set 'unitDetails' to an empty object\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 440,
        "wires": [
            [
                "dbc4597a91018d0b"
            ]
        ]
    },
    {
        "id": "c43e2e17.3ccf38",
        "type": "ui_switch",
        "z": "b67ee87b463ce07a",
        "name": "",
        "label": "Auto-Update",
        "tooltip": "",
        "group": "d76d78c0a7caadf3",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 520,
        "y": 180,
        "wires": [
            [
                "6b0e3c1d.00b31c"
            ]
        ]
    },
    {
        "id": "6b0e3c1d.00b31c",
        "type": "function",
        "z": "b67ee87b463ce07a",
        "name": "UpdateTable Toggle",
        "func": "var updateTable = msg.payload; // Assuming the payload of the switch is a boolean\nflow.set('updateTable', updateTable);\nreturn null; // No need to send anything further",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "6d14270a.14056c",
        "type": "function",
        "z": "b67ee87b463ce07a",
        "name": "Extract Unit Data and Count Units",
        "func": "var call = msg.payload.call || {};\n\nmsg.unit = call.unit || null;\nmsg.unit_alpha_tag = call.unit_alpha_tag || null;\nmsg.talkgroup = call.talkgroup || null;\nmsg.talkgroup_alpha_tag = call.talkgroup_alpha_tag || null;\nmsg.encrypted = call.encrypted || null;\n\n// Check the switch state to determine whether to update the table\nvar updateTable = flow.get('updateTable') || false;\nif (!updateTable) {\n    return null;  // Skip processing if updating is disabled\n}\n\n// Check if unit is 0 or -1, and skip processing if true\nif (msg.unit === 0 || msg.unit === -1 || msg.unit === null) {\n    return null;\n}\n\nvar unit = msg.unit;\nvar count = flow.get('unitDetails') || {};\n\nif (!count[unit]) {\n    count[unit] = {\n        unit: msg.unit,\n        unit_alpha_tag: msg.unit_alpha_tag,\n        talkgroup: msg.talkgroup,\n        talkgroup_alpha_tag: msg.talkgroup_alpha_tag,\n        encrypted: Boolean(msg.encrypted),\n        count: 1\n    };\n} else {\n    count[unit].count++;\n}\n\nflow.set('unitDetails', count);\nmsg.payload = Object.values(count);\nmsg.payload.sort((a, b) => b.count - a.count);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 360,
        "wires": [
            [
                "dbc4597a91018d0b"
            ]
        ]
    },
    {
        "id": "587753c3875a4a49",
        "type": "function",
        "z": "6748a75fc9aee743",
        "name": "Parse Console",
        "func": "var dots = context.get(\"dots\", \"memoryOnly\") || \"ring\";\ndots = (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots, \"memoryOnly\")\n\nfunction boldIfTrue(text, compare){\n    if (text == compare) {\n        return \"<span style='font-weight:bold; background-color:#cc0000;'>\"+text+\"</span>\";\n    };\n    return text;\n}\n\nfunction monospace(text) {\n    return \"<span style='font-family:monospace;'>\" + text + \"</span>\";\n}\n\n// const sortmsg = {\n//     payload: {\n//         command: \"setSort\",\n//         arguments: [[{ column: \"id\", dir: \"asc\" }]],\n//         returnPromise: false\n//     }\n// };\n\n//<span style='backgroundcolor:#3FB449; font-weight:bold;'>asdasas</span>..\n\nvar args = {};\nargs[\"time\"] = msg.payload[\"console\"].time;\nargs[\"severity\"] = msg.payload[\"console\"].severity;\nargs[\"message\"] = monospace(msg.payload[\"console\"].log_msg);\n\n// Send to table \nmsg.payload = {\n    command: \"addData\",\n    arguments: [[args],true],\n    returnPromise: true\n}\nnode.status({ fill: \"red\", shape: dots, text: args[\"time\"] });\n\nreturn msg;\n\n\n// var newmsg = { payload: Object.values(recData) };\n// node.send([[newmsg]]) //, sortmsg]]);\n// return;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 320,
        "wires": [
            [
                "326bec0f03b5568b"
            ]
        ]
    },
    {
        "id": "2a2fa6b0b2312af6",
        "type": "function",
        "z": "6748a75fc9aee743",
        "name": "Parse Trunk Msg",
        "func": "var dots = context.get(\"dots\", \"memoryOnly\") || \"ring\";\ndots = (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots, \"memoryOnly\")\n\nfunction boldIfTrue(text, compare){\n    if (text == compare) {\n        return \"<span style='font-weight:bold; background-color:#cc0000;'>\"+text+\"</span>\";\n    };\n    return text;\n}\n\nfunction monospace(text) {\n    return \"<span style='font-family:monospace;'>\" + text + \"</span>\";\n}\n\n// const sortmsg = {\n//     payload: {\n//         command: \"setSort\",\n//         arguments: [[{ column: \"id\", dir: \"asc\" }]],\n//         returnPromise: false\n//     }\n// };\n\n//<span style='backgroundcolor:#3FB449; font-weight:bold;'>asdasas</span>..\n\nif (msg.payload[\"message\"].meta != \"\") {\n    var args = {};\n    //args[\"time\"] = msg.payload.timestamp;\n    args[\"time\"] = new Date(msg.payload.timestamp * 1000).toLocaleString(\"en-US\", { timeZoneName: \"short\" });\n    args[\"sys_name\"] = msg.payload[\"message\"].sys_name + \"[\" + msg.payload[\"message\"].sys_num + \"]\";\n    args[\"meta\"] = msg.payload[\"message\"].meta;\n    args[\"opcode\"] = \"[\" + msg.payload[\"message\"].opcode + \"] \" + msg.payload[\"message\"].opcode_type;\n    //args[\"message\"] = monospace(msg.payload[\"console\"].log_msg);\n\n\n// Send to table \nmsg.payload = {\n    command: \"addData\",\n    arguments: [[args],true],\n    returnPromise: true\n}\nnode.status({ fill: \"red\", shape: dots, text: args[\"time\"] });\n\nreturn msg;\n}\n\n// var newmsg = { payload: Object.values(recData) };\n// node.send([[newmsg]]) //, sortmsg]]);\n// return;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 400,
        "wires": [
            [
                "875b471751ac339e"
            ]
        ]
    },
    {
        "id": "c1907c1b694e4623",
        "type": "link in",
        "z": "6748a75fc9aee743",
        "name": "Receive Console Logs",
        "links": [
            "70e0c09b2ad44518"
        ],
        "x": 385,
        "y": 320,
        "wires": [
            [
                "587753c3875a4a49"
            ]
        ]
    },
    {
        "id": "af7f2d9d9ba78997",
        "type": "link in",
        "z": "6748a75fc9aee743",
        "name": "link in 1",
        "links": [
            "8427f0f0af531ba1"
        ],
        "x": 385,
        "y": 400,
        "wires": [
            [
                "2a2fa6b0b2312af6"
            ]
        ]
    },
    {
        "id": "326bec0f03b5568b",
        "type": "ui_table",
        "z": "6748a75fc9aee743",
        "group": "d53af9f2dddbe6e1",
        "name": "Log Table",
        "order": 1,
        "width": 30,
        "height": 10,
        "columns": [
            {
                "field": "time",
                "title": "Time",
                "width": "200",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "severity",
                "title": "Severity",
                "width": "100",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "message",
                "title": "Message",
                "width": "",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 860,
        "y": 320,
        "wires": []
    },
    {
        "id": "875b471751ac339e",
        "type": "ui_table",
        "z": "6748a75fc9aee743",
        "group": "d53af9f2dddbe6e1",
        "name": "Trunk Table",
        "order": 12,
        "width": 30,
        "height": 10,
        "columns": [
            {
                "field": "time",
                "title": "Time",
                "width": "200",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "sys_name",
                "title": "System",
                "width": "100",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "opcode",
                "title": "Opcode",
                "width": "175",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "meta",
                "title": "Meta",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 850,
        "y": 400,
        "wires": []
    }
]
